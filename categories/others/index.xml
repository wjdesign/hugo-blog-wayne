<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>其他 on Wayne's blog | 偉恩的部落格 | 技術博客</title><link>https://wayneblog.ga/categories/others/</link><description>Recent content in 其他 on Wayne's blog | 偉恩的部落格 | 技術博客</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Wed, 08 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://wayneblog.ga/categories/others/index.xml" rel="self" type="application/rss+xml"/><item><title>你/妳真的了解 127.0.0.1 與 0.0.0.0 的區別？</title><link>https://wayneblog.ga/2023-02-08/different-in-localhost-ip/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://wayneblog.ga/2023-02-08/different-in-localhost-ip/</guid><description>&lt;img src="https://live.staticflickr.com/65535/52675709862_d54358fb30_o.jpg" alt="Featured image of post 你/妳真的了解 127.0.0.1 與 0.0.0.0 的區別？" />&lt;style>
.article-content p code {
background-color: #f5f5f5;
color: #ff3860;
}
.focus {
background: #f1e2e2;
color: #d62c2c;
padding: 0 5px;
}
.text-center {
text-align: center !important;
}
&lt;/style>
&lt;p>&lt;a class="link" href="http://www.52im.net/thread-3590-1-1.html" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;br>
&lt;a class="link" href="http://www.52im.net/topic-tcpipvol1.html" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;br>
&lt;a class="link" href="https://blog.csdn.net/huaying927/article/details/87625028" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;br>
&lt;a class="link" href="http://www.52im.net/thread-2928-1-1.html" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>對於工程師來說，127.0.0.1 與 0.0.0.0 這兩個IP地址再熟悉不過了，看起來好像就那麼回事，但真正較起真來，這兩個IP地址到底有什麼作用以及到底有什麼不同？貌似誰可以輕鬆回答，但張嘴卻又不知從何說起&amp;hellip;(這要是面試，估計真會被這搞砸&amp;hellip;)&lt;/p>
&lt;p>本文將系統地總結 127.0.0.1 和 0.0.0.0 這兩個IP地址的作用，以及它們之間的區別，希望能為你解惑。&lt;/p>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52676713038_5475fa3a18_o.png"
max-width="100%"
max-height="100%"
class="gallery-image"
loading="lazy"
>&lt;/p>
&lt;hr>
&lt;h2 id="ip地址分類">IP地址分類&lt;/h2>
&lt;p>我們先回顧一下IP地址的基礎知識（本節內容僅作快速概覽，如您對IP地址知識一無所知，建議首先閱讀《&lt;a class="link" href="https://blog.csdn.net/huaying927/article/details/87625028" target="_blank" rel="noopener"
>IP地址和子網劃分學習筆記之《IP地址詳解》&lt;/a>》）。&lt;/p>
&lt;h3 id="ip地址表示">IP地址表示&lt;/h3>
&lt;p>IP地址由兩個部分組成，&lt;strong>net-id&lt;/strong> 和 &lt;strong>host-id&lt;/strong>，即&lt;code>網絡號&lt;/code>和&lt;code>主機號&lt;/code>：&lt;/p>
&lt;ol>
&lt;li>net-id： 表示 ip 地址所在的&lt;strong>網絡號&lt;/strong>。&lt;/li>
&lt;li>host-id： 表示 ip 地址所在網絡中的某個&lt;strong>主機號碼&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;p>即：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">IP-address ::&lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &amp;lt;Network-ID&amp;gt;, &amp;lt;Host-ID&amp;gt;&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就像下圖這樣：&lt;/p>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52676220246_ff6aacfcdf_o.png"
max-width="100%"
max-height="100%"
class="gallery-image"
loading="lazy"
>&lt;/p>
&lt;h3 id="ip地址分類-1">IP地址分類&lt;/h3>
&lt;p>IP地址一共分為5類，即&lt;code>A～E&lt;/code>，它們分類的依據是其 &lt;strong>net-id&lt;/strong> 所佔的字節長度以及網絡號前幾位。&lt;/p>
&lt;p>大致分類如下：&lt;/p>
&lt;ol>
&lt;li>A類地址： 網絡號佔1個字節，網絡號的第一位固定為0。&lt;/li>
&lt;li>B類地址： 網絡號佔2個字節，網絡號的前兩位固定為10。&lt;/li>
&lt;li>C類地址： 網絡號佔3個字節，網絡號的前三位固定位110。&lt;/li>
&lt;li>D類地址： 前四位是1110，用於多播(multicast)，即一對多通信。&lt;/li>
&lt;li>E類地址： 前四位是1111，保留為以後使用。&lt;/li>
&lt;/ol>
&lt;p>其中，A、B、C 三類地址為&lt;code>單播地址&lt;/code>（unicast)，用於一對一通信，是最常用的。&lt;/p>
&lt;p>&lt;strong>IP地址分類&lt;/strong>看下面這張圖，可能更直接一些：&lt;/p>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52676649305_568b686eb1_o.jpg"
max-width="100%"
max-height="100%"
class="gallery-image"
loading="lazy"
>&lt;/p>
&lt;p>（上圖來源於《&lt;a class="link" href="https://blog.csdn.net/huaying927/article/details/87625028" target="_blank" rel="noopener"
>IP地址和子網劃分學習筆記之《IP地址詳解》&lt;/a>》）&lt;/p>
&lt;p>這裡還有一張&lt;strong>IP地址分類的思維導圖&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52676649285_5e12904ba4_o.jpg"
max-width="100%"
max-height="100%"
class="gallery-image"
loading="lazy"
>&lt;/p>
&lt;p>（上圖來源於《&lt;a class="link" href="https://blog.csdn.net/huaying927/article/details/87625028" target="_blank" rel="noopener"
>IP地址和子網劃分學習筆記之《IP地址詳解》&lt;/a>》）&lt;/p>
&lt;h3 id="特殊ip地址">特殊IP地址&lt;/h3>
&lt;p>&lt;strong>特殊IP地址&lt;/strong>就是用來做一些特殊的事情。&lt;a class="link" href="https://datatracker.ietf.org/doc/rfc1700/" target="_blank" rel="noopener"
>RFC1700&lt;/a>中定義了以下特殊IP地址：&lt;/p>
&lt;ol>
&lt;li>&lt;code>{0,0}&lt;/code>： 網絡號和主機號都全部為0，表示&amp;quot;&lt;strong>本網絡上的本主機&lt;/strong>&amp;quot;，只能用作源地址。&lt;/li>
&lt;li>&lt;code>{0，host-id}&lt;/code>： 本網絡上的某台主機。只能用作源地址。&lt;/li>
&lt;li>&lt;code>{-1,-1}&lt;/code>： 表示網絡號和主機號的所有位上都是 1（二進制），用於本網絡上的廣播，只能用作目的地址，發到該地址的數據包不能轉發到源地址所在網絡之外。&lt;/li>
&lt;li>&lt;code>{net-id,-1}&lt;/code>： 直接廣播到指定的網絡上。只能用作目的地址。&lt;/li>
&lt;li>&lt;code>{net-id,subnet-id,-1}&lt;/code>： 直接廣播到指定網絡的指定子網絡上。只用作目的地址。&lt;/li>
&lt;li>&lt;code>{net-id,-1,-1}&lt;/code>： 直接廣播到指定網絡的所有子網絡上。只能用作目的地址。&lt;/li>
&lt;li>&lt;code>{127,}&lt;/code>： 即網絡號為 127 的任意 ip 地址。都是內部主機&lt;strong>回環地址&lt;/strong>(loopback)，永遠都不能出現在主機外部的網絡中。&lt;/li>
&lt;/ol>
&lt;p>具體來說，特殊的IP地址，主要是以下這些：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>0.0.0.0&lt;/code>：&lt;br>
嚴格說來，0.0.0.0 已經不是一個真正意義上的IP地址了。它表示的是這樣一個&lt;strong>集合&lt;/strong>：&lt;strong>所有不清楚的主機和目的網絡&lt;/strong>。這裡的&amp;quot;&lt;strong>不清楚&lt;/strong>&amp;ldquo;是指在本機的路由表裡沒有特定條目指明如何到達。對本機來說，它就是一個&amp;rdquo;&lt;strong>收容所&lt;/strong>&amp;quot;，所有不認識的&amp;quot;三無&amp;quot;人員，一律送進去。如果你在網絡設置中設置了缺省網關，那麼 Windows 系統會自動產生一個目的地址為 0.0.0.0 的缺省路由。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>255.255.255.255&lt;/code>：&lt;br>
&lt;strong>限制廣播地址&lt;/strong>。對本機來說，這個地址指本網段內(同一廣播域)的所有主機。如果翻譯成人類的語言，應該是這樣：&amp;ldquo;這個房間裡的所有人都注意了！&amp;quot;，這個地址不能被路由器轉發。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>127.0.0.1&lt;/code>：&lt;br>
&lt;strong>本機地址&lt;/strong>，主要用於測試。用漢語表示，就是&amp;rdquo;&lt;strong>我自己&lt;/strong>&amp;quot;。在 Windows 系統中，這個地址有一個別名&amp;quot;&lt;strong>Localhost&lt;/strong>&amp;quot;。尋址這樣一個地址，是不能把它發到網絡接口的。除非出錯，否則在傳輸介質上永遠不應該出現目的地址為 &amp;ldquo;127.0.0.1&amp;rdquo; 的數據包。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>224.0.0.1&lt;/code>：&lt;br>
&lt;strong>組播地址&lt;/strong>，注意它和廣播的區別。從 224.0.0.0 到 239.255.255.255 都是這樣的地址。224.0.0.1 特指&lt;strong>所有主機&lt;/strong>，224.0.0.2 特指&lt;strong>所有路由器&lt;/strong>。這樣的地址多用於一些特定的程序以及多媒體程序。如果你的主機開啟了 IRDP (Internet路由發現協議，使用組播功能)功能，那麼你的主機路由表中應該有這樣一條路由。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>169.254.xx&lt;/code>：&lt;br>
如果你的主機使用了 DHCP 功能自動獲得一個IP地址，那麼當你的 &lt;strong>DHCP 服務器發生故障&lt;/strong>，或響應時間太長而超出了一個系統規定的時間，Windows 系統會為你分配這樣一個地址。如果你發現你的主機IP地址是一個諸如此類的地址，很不幸，十有八九是你的網絡不能正常運行了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>10.xxx&lt;/code>、&lt;code>172.16.xx～172.31.xx&lt;/code>、&lt;code>192.168.xx&lt;/code>：&lt;br>
&lt;strong>私有地址&lt;/strong>，這些地址被大量用於企業內部網絡中。一些寬帶路由器，也往往使用 192.168.1.1 作為&lt;strong>缺省地址&lt;/strong>。私有網絡由於不與外部互連，因而可能使用隨意的IP地址。保留這樣的地址供其使用是為了避免以後接入公網時引起地址混亂。使用私有地址的私有網絡在接入 Internet 時，要使用&lt;strong>地址翻譯&lt;/strong>(NAT)，將私有地址翻譯成公用合法地址。在 Internet 上，這類地址是不能出現的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="127001-和-0000-的區別">127.0.0.1 和 0.0.0.0 的區別&lt;/h2>
&lt;h3 id="基本情況">基本情況&lt;/h3>
&lt;p>通過上節基礎知識的回顧，我們回到正題：&lt;code>127.0.0.1 與 0.0.0.0 地址的區別是什麼？&lt;/code>&lt;/p>
&lt;p>我們先來看下共同點：&lt;/p>
&lt;ol>
&lt;li>都屬於&lt;strong>特殊地址&lt;/strong>。&lt;/li>
&lt;li>都屬於&lt;strong>A類地址&lt;/strong>。&lt;/li>
&lt;li>都是&lt;strong>IPV4&lt;/strong>地址。&lt;/li>
&lt;/ol>
&lt;p>接下來我們分別看下這兩個地址的具體作用，就一目了解了。&lt;/p>
&lt;h3 id="0000">0.0.0.0&lt;/h3>
&lt;h4 id="說明">說明&lt;/h4>
&lt;p>IPV4中，&lt;strong>0.0.0.0&lt;/strong> 地址被用於表示一個&lt;strong>無效的&lt;/strong>、&lt;strong>未知的&lt;/strong>或者&lt;strong>不可用的&lt;/strong>目標：&lt;/p>
&lt;ol>
&lt;li>在服務器中： 0.0.0.0 指的是本機上的所有IPV4地址，如果一個主機有兩個IP地址，192.168.1.1 和 10.1.2.1，並且該主機上的一個服務監聽的地址是 0.0.0.0 ，那麼&lt;strong>通過兩個ip地址都能夠訪問該服務&lt;/strong>。&lt;/li>
&lt;li>在路由中： 0.0.0.0 表示的是&lt;strong>默認路由&lt;/strong>，即當&lt;strong>路由表中沒有找到完全匹配的路由的時候&lt;/strong>所對應的路由。&lt;/li>
&lt;/ol>
&lt;h4 id="用途總結">用途總結&lt;/h4>
&lt;ol>
&lt;li>當一台主機&lt;strong>還沒有被分配&lt;/strong>一個IP地址的時候，用於表示主機本身（DHCP 分配IP地址的時候）。&lt;/li>
&lt;li>用作&lt;strong>默認路由&lt;/strong>，表示&amp;quot;&lt;strong>任意IPV4主機&lt;/strong>&amp;quot;。&lt;/li>
&lt;li>用來表示&lt;strong>目標機器不可用&lt;/strong>。&lt;/li>
&lt;li>用作服務端，表示本機上的&lt;strong>任意IPV4地址&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;h3 id="127001">127.0.0.1&lt;/h3>
&lt;h4 id="說明-1">說明&lt;/h4>
&lt;p>127.0.0.1 屬於 &lt;code>{127,}&lt;/code> 集合中的一個，而所有網絡號為 127 的地址都被稱之為&lt;strong>回環地址&lt;/strong>，所以&lt;strong>回環地址&lt;/strong>不等於 127.0.0.1，它們是&lt;code>包含&lt;/code>關係，即回環地址包含 127.0.0.1。&lt;/p>
&lt;h4 id="用途總結-1">用途總結&lt;/h4>
&lt;ol>
&lt;li>回環測試： 通過使用 &lt;code>ping 127.0.0.1&lt;/code> 測試某台機器上的網絡設備，操作系統或者 TCP/IP 實現是否工作正常。&lt;/li>
&lt;li>DDos攻擊防禦： 網站收到 DDos 攻擊之後，將域名A記錄到 127.0.0.1，即讓攻擊者自己攻擊自己。&lt;/li>
&lt;li>程序測試： 大部分 Web 容器測試的時候綁定的本機地址。&lt;/li>
&lt;/ol>
&lt;h4 id="回環地址的定義">回環地址的定義&lt;/h4>
&lt;p>所有發往該類地址的數據包都應該被 loop back。&lt;/p>
&lt;h3 id="bonus127001-與-localhost-的關係">BONUS：127.0.0.1 與 localhost 的關係&lt;/h3>
&lt;p>相比 127.0.0.1，localhost 具有更多的意義。&lt;/p>
&lt;p>localhost 是個&lt;strong>域名&lt;/strong>，而不是一個ip地址。之所以我們經常把 localhost 與 127.0.0.1 認為是同一個是因為我們使用的大多數電腦上都講 localhost &lt;strong>指向&lt;/strong>了 127.0.0.1 這個地址。&lt;/p>
&lt;p>在 ubuntu 系統中，&lt;code>/ets/hosts&lt;/code> 文件中都會有如下內容：&lt;/p>
&lt;h5 id="etshosts">/ets/hosts&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">127.0.0.1 localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">127.0.1.1 52im-aliyun
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># The following lines are desirable for IPv6 capable hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">::1 ip6-localhost ip6-loopback
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fe00::0 ip6-localnet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ff00::0 ip6-mcastprefix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ff02::1 ip6-allnodes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ff02::2 ip6-allrouters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面第一行是幾乎每台電腦上都會有的默認配置。但是 localhost 的意義並不局限於 127.0.0.1。&lt;/p>
&lt;p>localhost 是一個&lt;strong>域名&lt;/strong>，用於指代 &lt;strong>this computer&lt;/strong> 或者 &lt;strong>this host&lt;/strong>，可以用它來獲取運行在本機上的網絡服務。&lt;/p>
&lt;p>在大多數系統中，localhost 被指向了 IPV4 的 &lt;code>127.0.0.1&lt;/code> 和 IPV6 的&lt;code>::1&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">127.0.0.1 localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">::1 localhost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以，在使用的時候要注意確認IPV4還是IPV6。&lt;/p>
&lt;hr>
&lt;h2 id="結語">結語&lt;/h2>
&lt;p>&lt;code>127.0.0.1&lt;/code> 是一個&lt;strong>環回地址&lt;/strong>，並不表示&amp;quot;&lt;strong>本機&lt;/strong>&amp;quot;。&lt;/p>
&lt;p>&lt;code>0.0.0.0&lt;/code> 才是真正表示&amp;quot;&lt;strong>本網絡中的本機&lt;/strong>&amp;quot;。&lt;/p>
&lt;p>在實際應用中：一般我們在服務端綁定端口的時候可以選擇綁定到 &lt;code>0.0.0.0&lt;/code>，這樣我的服務訪問方就可以通過我的&lt;strong>多個ip地址&lt;/strong>訪問我的服務。&lt;/p>
&lt;p>比如：我有一台服務器，一個外網地址A,一個內網地址B，如果我綁定的端口指定了 &lt;code>0.0.0.0&lt;/code>，那麼通過內網地址或外網地址&lt;strong>都可以訪問&lt;/strong>我的應用。&lt;/p>
&lt;p>但是如果我只綁定了內網地址，那麼通過外網地址就不能訪問。所以如果綁定 &lt;code>0.0.0.0&lt;/code>，也有一定安全隱患，對於只需要內網訪問的服務，可以只綁定內網地址。&lt;/p>
&lt;hr></description></item><item><title>以生活的例子說明單線程和多線程</title><link>https://wayneblog.ga/2023-01-07/single-multi-thread/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://wayneblog.ga/2023-01-07/single-multi-thread/</guid><description>&lt;img src="https://live.staticflickr.com/65535/52611539777_c564013cbd_o.png" alt="Featured image of post 以生活的例子說明單線程和多線程" />&lt;style>
.article-content p code {
background-color: #f5f5f5;
color: #ff3860;
}
.focus {
background: #f1e2e2;
color: #d62c2c;
padding: 0 5px;
}
&lt;/style>
&lt;p>&lt;a class="link" href="https://samknows.one/hc/en-gb/articles/115003164305-What-is-the-difference-between-Single-and-Multi-Thread-" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;br>
&lt;a class="link" href="https://www.twblogs.net/a/5b8d26df2b717718833be03a" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;/p>
&lt;p>以生活例子說明單線程與多線程。&lt;/p>
&lt;hr>
&lt;h2 id="程序設計的目標">程序設計的目標&lt;/h2>
&lt;p>在我看來單從程序的角度來看，一個好的程序的目標應該是性能與用戶體驗的平衡。當然一個程序是否能夠滿足用戶的需求暫且不談，這是業務層面的問題，我們僅僅討論程序本身。圍繞兩點來展開，性能與用戶體驗。&lt;/p>
&lt;ul>
&lt;li>性能：高性能的程序應該可以等同於CPU的利用率，CPU的利用率越高(一直在工作，沒有閒下來的時候)，程序的性能越高。&lt;/li>
&lt;li>體驗：這裏的體驗不只是界面多麼漂亮，功能多麼順手，這裏的體驗指程序的響應速度，響應速度越快，用戶體驗越好。&lt;/li>
&lt;/ul>
&lt;p>下面我們就這兩點進行各種模型的討論。&lt;/p>
&lt;hr>
&lt;h2 id="單線程多任務無阻塞">單線程多任務無阻塞&lt;/h2>
&lt;p>以生活中食堂打飯的場景作爲比喻，假設有這樣的場景，小A，小B，小C 在窗口依次排隊打飯。&lt;/p>
&lt;p>假設窗口負責打飯的阿姨打一個菜需要耗時1秒。如果小A需要2個菜，小B需要3個菜，小C需要2個菜。如下：&lt;/p>
&lt;ul>
&lt;li>阿姨(CPU)：打一個菜需要1秒&lt;/li>
&lt;li>小A：2個菜&lt;/li>
&lt;li>小B：3個菜&lt;/li>
&lt;li>小C：2個菜&lt;/li>
&lt;/ul>
&lt;p>那麼在這種模型下將所有服務做完阿姨需要耗時 2 + 3 + 2 = &lt;strong>7秒&lt;/strong>&lt;/p>
&lt;p>阿姨 = CPU，小A、小B、小C = 任務(這裏是以任務爲概念，表示需要做一些事情)&lt;/p>
&lt;p>這種模型下CPU是滿負荷不間斷運轉的，沒有空閒，用戶體驗還不錯。&lt;/p>
&lt;p>這種程序中每個任務的耗時都比較小，是非常理想的狀態，一般情況下基本不太可能存在。&lt;/p>
&lt;hr>
&lt;h2 id="單線程多任務io阻塞">單線程多任務IO阻塞&lt;/h2>
&lt;p>將上面的場景稍微做改動：&lt;/p>
&lt;ul>
&lt;li>阿姨：打一個菜需要1秒&lt;/li>
&lt;li>小A：2個菜，但是忘記帶錢了，要找同學送過來，估計需要等5分鐘可以送到(可以理解爲磁盤IO)&lt;/li>
&lt;li>小B：3個菜&lt;/li>
&lt;li>小C：2個菜&lt;/li>
&lt;/ul>
&lt;p>這種情況下小A這裏發生了阻塞，實際上小A這裏耗費了5分鐘也就是 300秒 + 2個菜的時間，也就是302秒，而CPU則空閒了300秒，實際上工作2秒。&lt;/p>
&lt;p>所有服務做完花費 302 + 3 + 2 = &lt;strong>307秒&lt;/strong>，CPU實際工作7秒，等待300秒。極大浪費了CPU的時鐘週期。&lt;/p>
&lt;p>用戶體驗很差，因爲小A阻塞的時候，後面的所有人都等着，而實際上此時CPU空閒。所以單線程中不要有阻塞出現。&lt;/p>
&lt;hr>
&lt;h2 id="單線程多任務異步io">單線程多任務異步IO&lt;/h2>
&lt;p>還是上面的模型，加入一個角色：值日生小哥，他負責事先詢問每一個人是否帶錢了，如果帶錢了則允許打菜，否則把錢準備好了再說。&lt;/p>
&lt;ol>
&lt;li>值日生小哥問小A準備好打菜了嗎，小A說忘帶錢了，值日生小哥說，你把錢準備好了再說，小A開始準備(需要300秒，從此刻開始記時)。&lt;/li>
&lt;li>值日生小哥問小B準備好打菜了嗎，小B說可以了，阿姨服務小B，耗時3秒。&lt;/li>
&lt;li>值日生小哥問小C準備好打菜了嗎，小C說可以了，阿姨服務小C，耗時2秒。&lt;/li>
&lt;li>值日生小哥問小A準備好了沒有，小A說還要等一會，阿姨由於沒有人過來服務，處於空閒狀態。&lt;/li>
&lt;li>300秒之後，小A準備好了，阿姨服務小A，耗時2秒。&lt;/li>
&lt;/ol>
&lt;p>整個過程做完耗時 300 + 2 = &lt;strong>302秒&lt;/strong>，CPU工作7秒，空閒295秒。&lt;/p>
&lt;p>值日生小哥相當於select模型中的select功能，負責輪詢任務是否可以工作，如果可以則直接工作，否則繼續輪詢。&lt;/p>
&lt;p>在小A阻塞的300秒裏面，阿姨(CPU)沒有傻等，而是在服務後面的人，也就是小B和小C，所以這裏與模型3不同的是，這裏有5秒CPU是工作的。&lt;/p>
&lt;p>如果打飯的人越多，這種模型CPU的利用率越高，例如如果有小D，小E，小F&amp;hellip;等需要服務，CPU可以在小A阻塞的300秒期間內繼續服務其他人。實際上值日生小哥輪詢也會耗時，這個耗時是很少的，幾乎可以忽略不計，但是如果任務非常多，這個輪詢還是會影響性能的，但是epoll模型已經不使用輪詢的方式，相當於A，B，C會主動跟值日生小哥報告，說我準備好了，可以直接打菜了。&lt;/p>
&lt;p>這種模式下用戶體驗好，CPU利用率高(任務越多利用率越高)&lt;/p>
&lt;hr>
&lt;h2 id="單線程多任務有耗時計算">單線程多任務，有耗時計算&lt;/h2>
&lt;p>回到最開始的模型，如下：&lt;/p>
&lt;ul>
&lt;li>阿姨：打一個菜需要1秒&lt;/li>
&lt;li>小A：200個菜&lt;/li>
&lt;li>小B：3個菜&lt;/li>
&lt;li>小C：2個菜&lt;/li>
&lt;/ul>
&lt;p>順序做完所有任務，需要耗時 200 + 3 + 2 = 205秒，CPU無空閒，但是用戶體驗卻不是很好，因爲顯然後面的 B、C 需要等待小A 200秒的時間，這種情況下是沒有IO阻塞的，但是任務A本身太耗CPU了，所以說如果單線程出現了耗時的操作，一定會影響體驗(IO操作或者是耗時的計算都屬於耗時的操作，都會導致阻塞，但是這兩種導致阻塞的性質是不一樣的)。&lt;/p>
&lt;p>在所有的單線程模型中都不允許出現阻塞的情況，如果出現，那麼用戶體驗是極差的，例如在UI編程中(QT、C# Winform)是不允許在UI線程中做耗時的操作的，否則會導致UI界面無響應。 編寫Nodejs程序的時候，我們所寫的代碼實際上是在一個線程中執行的，所以也不允許有阻塞的操作(當然整個Nodejs框架實現異步，一定不止一個線程)。&lt;/p>
&lt;p>出現阻塞的情況一般有2種，一種是&lt;strong>IO阻塞&lt;/strong>，例如典型的如磁盤操作，這種情況下的阻塞會導致CPU空閒等待(當然現代操作系統中如果IO阻塞，操作系統一定會將導致IO阻塞的線程掛起)。這種阻塞的情況，可以通過異步IO的方法避免，這樣就避免程序中僅有的單線程被操作系統掛起。另一種情況下是確實有&lt;strong>非常多的計算操作&lt;/strong>，例如一個複雜的加密算法，確實需要消耗非常多的CPU時間，這種情況下CPU並不是空閒的，反而是全負荷工作的。&lt;/p>
&lt;p>這種CPU密集的工作不適合放在單線程中，雖然CPU的利用率很高，但是用戶體驗並不是很好。這種情況下使用多線程反而會更好，例如如果3個任務，每個任務都在一個線程中，也就是有3個線程，A任務在ThreadA中，B任務在ThreadB中，C任務在ThreadC中，那麼即使A任務的計算量比較大，B，C兩個任務所在的線程也不必等待A任務完成之後再工作，他們也有機會得到調度，這是由操作系統來完成的。這樣就不會因爲某一個任務計算量大，而導致阻塞其他任務而影響體驗了。&lt;/p>
&lt;hr>
&lt;h2 id="多線程程序">多線程程序&lt;/h2>
&lt;p>我們將上面的模型改造成多線程的模型是怎樣的呢，我們在模型5的基礎上添加一個角色，管理員大叔(操作系統的角色)：&lt;/p>
&lt;ul>
&lt;li>阿姨：打一個菜需要1秒&lt;/li>
&lt;li>小A：200個菜&lt;/li>
&lt;li>小B：3個菜&lt;/li>
&lt;li>小C：2個菜&lt;/li>
&lt;/ul>
&lt;p>加入管理員大叔之後變成這樣的了，小A打兩個菜之後，大叔說，你打的菜太多了，不能因爲你要打200個菜，讓後面的同學都沒有機會打菜，你打兩個菜之後等一會，讓後面的同學也有機會。&lt;/p>
&lt;p>大叔讓小B打兩個菜，然後讓小C打兩個菜(小C完成)，然後再讓小A打兩個菜(完成之後小A總共就有4個菜了)，再讓小B打1個菜(此時小B總共打3個菜，完成)，然後小A打剩下的196個菜。&lt;/p>
&lt;p>CPU的利用率：很高，阿姨在不斷的工作。&lt;/p>
&lt;p>用戶體驗：不錯，即使小A要打200個菜，小B，小C也有機會；當然如果小A說我是幫校長打菜，要快一點(&lt;strong>線程優先級高&lt;/strong>)，那也只能先把小A服務完。&lt;/p>
&lt;p>總耗時： 200 + 3 + 2 + (大叔指揮安排所消耗的時間，包括從小C切換回小A的時候，大叔要知道小A上次打的菜是哪兩個，這次應該接着打什麼菜，這相當於線程上下文切換的開銷以及線程環境的保存與恢復)，所以並不是線程越多越好，線程非常多的時候大叔估計會焦頭爛額吧，要記住這麼狀態，切換來切換去也耗時間。&lt;/p>
&lt;p>這種模型下實際上是將小A的耗時任務，&lt;strong>分成多份去執行&lt;/strong>而不是集中執行，所以小A要完成他的任務，可能需要更多的時間(期間他也需要等別人，阿姨不會一直爲他一個人服務，但是阿姨爲他服務的時間是沒有變化的)，這種其實有點以時間換取用戶體驗(小B和小Ｃ的體驗，小Ａ的體驗可能就不會那麼好了，但是小Ａ本來也非常耗時，所以多等一會是不是也沒關係)。&lt;/p>
&lt;p>那麼IO阻塞和CPU計算耗時阻塞這兩者有什麼區別呢？&lt;/p>
&lt;p>區別在於IO阻塞是不使用CPU的，而CPU計算耗時導致的阻塞是會使用CPU的。&lt;/p>
&lt;p>例如上面的例子中，小A說忘記帶錢了需要同學送錢，於是小A等着同學送錢過來，這個過程中阿姨並沒有爲小A提供服務，這個過程中爲小A提供服務的是他的同學(送錢過來)，實際上小A的同學相當於現代計算機系統中的DMA(直接內存操作)，小A同學送錢的過程相當於DMA從磁盤讀取數據到內存的過程，這個過程基本不需要CPU干預。&lt;/p>
&lt;p>當然在DMA技術還沒有出現的年代，從磁盤讀取文件也是需要CPU發送指令去讀取的，也就是說需要CPU的計算，應用到這裏的場景中，就是阿姨親自跑一趟幫小A把錢拿過來。&lt;/p>
&lt;hr>
&lt;h2 id="多cpu">多CPU&lt;/h2>
&lt;p>多CPU是一個更加複雜的問題，多CPU如何調度？小A在第一個窗口打兩個菜，又跑到第二個窗口打兩個菜這種情況如何處理？&lt;/p>
&lt;p>小A在第一個窗口，小B在第二個窗口他們要同一個菜，但是這個菜只夠一個人，那麼兩個窗口阿姨如何分配這種需求(實際上應該是由操作系統也就是管理員大叔來決定如何分配，也就是多核下的線程同步與互斥)？&lt;/p>
&lt;p>多核CPU情況下，多線程的調度、互斥、鎖與同步相對來講更加複雜，多核情況下是真正的並行，同一時刻有多個線程在同時運行，他們的競爭怎麼處理，多個CPU之間如何同步(多CPU之間的緩存狀態一致性)等等一系列的問題。&lt;/p>
&lt;hr>
&lt;h2 id="多線程與多進程">多線程與多進程&lt;/h2>
&lt;p>上面描述的多線程實際上是討論的是多線程的調度問題，這裏我們說一說多線程與多進程與資源的分配問題。什麼意思呢，一群人(多個線程)在一個桌子(進程)上吃飯，他們會涉及到一些問題，比如多個人可能會夾一個菜(競爭)，A和B同時看到盤子裏面有一塊肉，同時伸出筷子去夾，A先夾走，B遲了一點伸到盤子的時候已經沒了，只能縮回來(臨界資源，互斥)，有一個點心需要用饃夾肉一起吃。A夾了肉，B夾了饃，A需要B的饃，B需要A的肉，他們僵持不下誰都不讓步(死鎖)。&lt;/p>
&lt;p>多線程之間的資源共享是非常方便的，因爲他們共用進程的資源空間(在一個桌子上)，但是需要注意一系列的問題：競爭、死鎖、同步&amp;hellip;等。如果在旁邊再開一個桌子(進程)。 那麼桌子之間講話，遞東西又不方便(進程間通信)，而開一個桌子的開銷比在一個桌子上多加一個人的開銷要大。另外一個桌子上的人數不可能無限制增加，桌子的容量有限也坐不下這麼多人(進程的線程句柄是有限制的)。一個桌子壞了不會影響到另一個桌子上面人的就餐情況(進程間相互DuLi，一個進程崩潰不會影響另一個)，而一個桌子上的某人喝掛了需要送醫院，估計這一桌人都要散了(線程掛掉會導致整個進程也掛掉)。所以多線程與多進程是各有優缺點，不能一概而論。&lt;/p>
&lt;hr>
&lt;h2 id="總結">總結&lt;/h2>
&lt;p>單線程程序：適合IO異步，不能阻塞，不能有大量耗CPU的計算，典型如Nodejs，還有一些網絡程序。&lt;/p>
&lt;hr></description></item></channel></rss>