<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>grpc on Wayne(偉恩)的部落格</title><link>https://wayneblog.ga/tags/grpc/</link><description>Recent content in grpc on Wayne(偉恩)的部落格</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Fri, 22 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://wayneblog.ga/tags/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC 基本介紹</title><link>https://wayneblog.ga/2022-07-22/grpc-basic-introduction/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://wayneblog.ga/2022-07-22/grpc-basic-introduction/</guid><description>&lt;img src="https://live.staticflickr.com/65535/52276040314_2afa0e7026_o.png" alt="Featured image of post gRPC 基本介紹" />&lt;style>
.focus {
background: #f1e2e2;
color: #d62c2c;
padding: 0 5px;
}
&lt;/style>
&lt;p>&lt;a class="link" href="https://youtu.be/MYmPY1E17ZM" target="_blank" rel="noopener"
>參考網站 - gRPC 說明影片 @ BESG&lt;/a>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>SOURCE CODE&lt;br>
對應的程式碼可檢視 &lt;a class="link" href="https://github.com/pjchender/besg-grpc/tree/main/proto/calculator" target="_blank" rel="noopener"
>besg-grpc&lt;/a> 的 repository。&lt;/p>
&lt;/blockquote>
&lt;h2 id="grpc-是什麼以-golang-說明與實作">gRPC 是什麼：以 Golang 說明與實作&lt;/h2>
&lt;h3 id="說明">說明&lt;/h3>
&lt;p>RPC 的全名是 remote procedure call，主要是作為電腦和電腦間溝通使用。A 電腦可以呼叫 B 電腦執行某些程式，B 電腦會將結果回傳給 A 電腦，A 電腦在收到回應後會再繼續處理其他任務。RPC 的好處在於，雖然 A 電腦是發送請求去請 B 電腦做事，但其呼叫的方式，就很像是 A 電腦直接在呼叫自己內部的函式一般。&lt;/p>
&lt;p>gRPC 也是基於這樣的概念，讓想要呼叫 server 處理請求的 client，在使用這支 API 時就好像是呼叫自己內部的函式一樣簡單自然。從功能面來說，gRPC 就像 Web 常用的 Restful API 一樣，都是在處理請求和回應，並且進行資料交換，但 gRPC 還多了其他的功能和特色。&lt;/p>
&lt;p>gRPC 是由 Google 開發的開源框架，它快速有效、奠基在 HTTP/2 上提供低延遲（low latency），支援串流，更容易做到權限驗證（authentication）。在下面的文章中，將會對於 gRPC 能提供的特色有更多說明。&lt;/p>
&lt;hr>
&lt;h3 id="protocol-buffers-是什麼">Protocol Buffers 是什麼&lt;/h3>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener"
>Protocol Buffers&lt;/a> @ Google Developer&lt;/li>
&lt;li>&lt;a class="link" href="https://pjchender.dev/internet/protocol-buffer/" target="_blank" rel="noopener"
>Protocol Buffers 筆記&lt;/a> @ pjchender.dev&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在學習 gRPC 時，需要同時了解什麼是 &lt;strong>Protocol Buffers&lt;/strong>。在傳統的 Restful API 中，最常使用的資料交換格式通常是 JSON；但到了 gRPC 中，資料交換的格式則是使用名為 &lt;a class="link" href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener"
>Protocol Buffers&lt;/a> 的規範／語言。&lt;/p>
&lt;h6 id="json">json&lt;/h6>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;firstName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Sushiro&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;lastName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Global&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h6 id="protocol-buffers">protocol buffers&lt;/h6>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// Protocol Buffers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">message User {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string first_name = 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string last_name = 2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int32 age = 3;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是說，當我們想要使用 gRPC 的服務來交換資料前，必須先把資料「&lt;strong>格式&lt;/strong>」和「&lt;strong>方法&lt;/strong>」都定義清楚。&lt;/p>
&lt;blockquote>
&lt;p>TIP:&lt;br>
使用 gRPC 前，不只需要先把資料交換的格式定義清楚，同時也需要把資料交換的方法定義清楚。&lt;/p>
&lt;/blockquote>
&lt;p>這裡要稍微釐清一點很重要的是，&lt;mark>&lt;strong>Protocol Buffers 可以獨立使用，不一定要搭配 gRPC；但使用 gRPC 一定要搭配 Protocol Buffers。&lt;/strong>&lt;/mark>&lt;/p>
&lt;hr>
&lt;h3 id="實作將-protocol-buffers-編譯成在-golang-中可使用的檔案">實作將 Protocol Buffers 編譯成在 Golang 中可使用的檔案&lt;/h3>
&lt;blockquote>
&lt;p>對應的程式碼可檢視 &lt;a class="link" href="https://github.com/pjchender/besg-grpc/tree/main/proto/calculator" target="_blank" rel="noopener"
>besg-grpc&lt;/a> repository 中的 proto 資料夾。&lt;/p>
&lt;/blockquote>
&lt;h4 id="step-1撰寫-protocol-buffers-檔案">STEP 1：撰寫 Protocol Buffers 檔案&lt;/h4>
&lt;ul>
&lt;li>使用 &lt;code>message&lt;/code> 定義資料交換的格式。&lt;/li>
&lt;li>使用 &lt;code>service&lt;/code> 定義呼叫 API 的方法名稱。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">syntax&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 定義要使用的 protocol buffer 版本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">calculator&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// for name space
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">option&lt;/span> &lt;span class="nx">go_package&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;proto/calculator&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// generated code 的 full Go import path
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">message&lt;/span> &lt;span class="nx">CalculatorRequest&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int64&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int64&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">message&lt;/span> &lt;span class="nx">CalculatorResponse&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int64&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">service&lt;/span> &lt;span class="nx">CalculatorService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rpc&lt;/span> &lt;span class="nf">Sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">CalculatorRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">CalculatorResponse&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="step-2安裝編譯-protocol-buffer-所需的套件">STEP 2：安裝編譯 Protocol Buffer 所需的套件&lt;/h4>
&lt;p>此部份可參考 &lt;a class="link" href="https://pjchender.dev/internet/protocol-buffer/#%E7%B7%A8%E8%AD%AF-protocol-buffers%EF%BC%88compiling%EF%BC%89" target="_blank" rel="noopener"
>編譯 Protocol Buffers（Compiling）&lt;/a> 段落。&lt;/p>
&lt;h5 id="安裝-compiler-macos">安裝 compiler (macOS)&lt;/h5>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安裝 compiler，安裝完後就會有 protoc CLI 工具&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install protobuf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">protoc --version &lt;span class="c1"># Ensure compiler version is 3+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --- 使用 golang 才需要安裝以下兩個套件 ---&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安裝 protoc-gen-go 後可以將 proto buffer 編譯成 Golang 可使用的檔案&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go get github.com/golang/protobuf/protoc-gen-go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安裝 grpc-go 後，可以在 Golang 中使用 gRPC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go get -u google.golang.org/grpc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="step-3編譯-protocol-buffer-檔案">STEP 3：編譯 Protocol Buffer 檔案&lt;/h4>
&lt;p>進到放有 &lt;code>.proto&lt;/code> 檔的資料夾後，在終端機輸入下述指令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">protoc *.proto --go_out&lt;span class="o">=&lt;/span>&lt;span class="nv">plugins&lt;/span>&lt;span class="o">=&lt;/span>grpc:. --go_opt&lt;span class="o">=&lt;/span>&lt;span class="nv">paths&lt;/span>&lt;span class="o">=&lt;/span>source_relative
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在成功編譯好後，應該會看到同樣的資料夾位置出現 &lt;code>*.pb.go&lt;/code> 的檔案，這就是編譯好後可以在 Golang 中使用 Protocol Buffer 和 gRPC 的檔案。&lt;/p>
&lt;hr>
&lt;h3 id="實作-grpc-server">實作 gRPC Server&lt;/h3>
&lt;blockquote>
&lt;p>對應的程式碼可檢視 &lt;a class="link" href="https://github.com/pjchender/besg-grpc/tree/main/server" target="_blank" rel="noopener"
>besg-grpc&lt;/a> repository 中的 server 資料夾。&lt;/p>
&lt;/blockquote>
&lt;h4 id="step-1建立-grpc-server">STEP 1：建立 gRPC server&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Server&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;starting gRPC server...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lis&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;localhost:50051&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to listen: %v \n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">grpcServer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">calculatorPB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterCalculatorServiceServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">grpcServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Server&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">grpcServer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Serve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lis&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to serve: %v \n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="step-2實作-protocol-buffer-中的-service">STEP 2：實作 Protocol Buffer 中的 service&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Server&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">calculatorPB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CalculatorRequest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">calculatorPB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CalculatorResponse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Sum function is invoked with %v \n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">a&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetA&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetB&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">calculatorPB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CalculatorResponse&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="step-3啟動-server">STEP 3：啟動 server&lt;/h4>
&lt;p>在終端機中輸入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">go run server/server.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即可啟動 gRPC server。&lt;/p>
&lt;h4 id="補充使用-bloom-rpc-進行測試">補充：使用 Bloom RPC 進行測試&lt;/h4>
&lt;p>在只有 server 的情況下，可以使用 &lt;a class="link" href="https://github.com/uw-labs/bloomrpc" target="_blank" rel="noopener"
>BloomRPC&lt;/a> 這套工具來模擬 Client 對 gRPC server 發送請求，功能就類似在 Restful 中使用的 Postman。&lt;/p>
&lt;p>使用時只需要匯入 proto 檔後，即可看到對應可呼叫的方法和可帶入的參數，能這麼方便也是因為在 protocol buffer 中已經把傳輸的資料格式和能對應呼叫的方法都定好的緣故。&lt;/p>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52275797523_2aa5d2670c_o.png"
max-width="100%"
max-height="100%"
class="gallery-image"
>&lt;/p>
&lt;hr>
&lt;h3 id="實作-grpc-client">實作 gRPC Client&lt;/h3>
&lt;blockquote>
&lt;p>完整程式碼可檢視 &lt;a class="link" href="https://github.com/pjchender/besg-grpc/tree/main/client" target="_blank" rel="noopener"
>besg-grpc&lt;/a> repository 中的 client 資料夾。&lt;/p>
&lt;/blockquote>
&lt;h4 id="step-1與-grpc-server-建立連線">STEP 1：與 gRPC server 建立連線&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Dial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;localhost:50051&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">grpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithInsecure&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to dial: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">client&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">calculatorPB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewCalculatorServiceClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">doUnary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="step-2使用-protocol-buffers-中定義好的-service">STEP 2：使用 Protocol Buffers 中定義好的 Service&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">doUnary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">client&lt;/span> &lt;span class="nx">calculatorPB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CalculatorServiceClient&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Staring to do a Unary RPC&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">calculatorPB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CalculatorRequest&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">A&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">B&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error while calling CalculatorService: %v \n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Response from CalculatorService: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="step-3向-server-發送請求">STEP 3：向 server 發送請求&lt;/h4>
&lt;p>在終端機中輸入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">go run client/client.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即可執行 &lt;code>client.go&lt;/code> 並向剛剛起動好的 server 發送請求。&lt;/p>
&lt;hr>
&lt;h2 id="grpc-解決了什麼">gRPC 解決了什麼&lt;/h2>
&lt;h3 id="grpc-和-rest-api-的比較">gRPC 和 REST API 的比較&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/zh-tw/aspnet/core/grpc/comparison?view=aspnetcore-5.0" target="_blank" rel="noopener"
>比較 gRPC 服務與 HTTP API&lt;/a> @ microsoft docs&lt;/p>
&lt;/blockquote>
&lt;p>簡單來說，gRPC 在效能上比起 REST API 好非常多：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>項目&lt;/strong>&lt;/th>
&lt;th>&lt;strong>gRPC&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Restful API&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>資料傳輸格式（Payload）&lt;/td>
&lt;td>Protocol Buffer - 更快且更小&lt;/td>
&lt;td>JSON, XML, formData - 較慢且較大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>通訊協定&lt;/td>
&lt;td>HTTP/2&lt;/td>
&lt;td>HTTP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>傳輸方式&lt;/td>
&lt;td>支援一般的「請求-回應」、伺服器端串流、Client 端串流、與雙向串流（streaming）&lt;/td>
&lt;td>僅能透過 Client 發送請求、Server 給予回應&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>API 方法命名&lt;/td>
&lt;td>沒有限制，一般會直接描述該方法要做的事，例如 &lt;code>createUser&lt;/code>, &lt;code>getUser&lt;/code>。不需要思考路由命名。&lt;/td>
&lt;td>使用動詞（GET, POST, PUT, PATCH, DELETE）搭配資源來命名。需要根據不同的行為來定義不同的路由。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Client 呼叫 API 的方式&lt;/td>
&lt;td>就像呼叫一般的函式&lt;/td>
&lt;td>透過特定的 Endpoint，給予符合的資料型別&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Server 建立 API 的方式&lt;/td>
&lt;td>根據文件（Protocol Buffer）實作功能，不需要額外檢查資料型別與方法正確性。&lt;/td>
&lt;td>根據文件（Swagger）實作功能，但須額外檢查資料型別。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>根據文件產生程式碼&lt;/td>
&lt;td>Protocol Buffers&lt;/td>
&lt;td>OpenAPI / Swagger&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>此外，gRPC 的 server，預設就是非同步的，因此不會阻塞任何進來的請求，並可以平行處理多個請求。gRPC Client 則可以選擇要用同步（阻塞）或非同步的方式處理。&lt;/p>
&lt;hr>
&lt;h3 id="使用-protocol-buffers-的好處">使用 Protocol Buffers 的好處&lt;/h3>
&lt;ul>
&lt;li>節省網路傳輸量：速度更快、檔案更小&lt;/li>
&lt;li>節省 CPU 消耗：Parse JSON 本身是 CPU intensive 的任務；Parse Protocol Buffer（binary format）因為更接近底層機器表徵資料的方式，消耗的 CPU 資源較低&lt;/li>
&lt;li>跨程式語言：Protocol Buffer 可以根據不同的程式語言編譯出不同的檔案&lt;/li>
&lt;li>可以寫註解、型別清楚明確&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>TIP&lt;br>
節省網路傳輸量和 CPU 消耗在行動裝置上的影響可能更重要。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="跨程式語言的好處">跨程式語言的好處&lt;/h3>
&lt;p>透過 Protocol Buffer 定義好資料的傳輸欄位（&lt;code>message&lt;/code>）和呼叫的方法（&lt;code>service&lt;/code>）後，gRPC 即可在不同程式語言上運行，這非常適合微服務（micro-services）的應用情境，只要雙方一起定義好 schema 後，就可以用不同的程式語言進行開發。&lt;/p>
&lt;hr>
&lt;h3 id="使用-http2-的好處">使用 HTTP/2 的好處&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://imagekit.io/blog/http2-vs-http1-performance/" target="_blank" rel="noopener"
>HTTP/2 vs HTTP/1 - Performance Comparison?&lt;/a>&lt;/li>
&lt;li>Demo：&lt;a class="link" href="https://imagekit.io/demo/http2-vs-http1" target="_blank" rel="noopener"
>Performance difference between HTTP2 and HTTP1.1&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.itread01.com/content/1546793670.html" target="_blank" rel="noopener"
>瀏覽器允許的併發請求資源數是有限制的-分析&lt;/a> @ ITRead01&lt;/li>
&lt;/ul>
&lt;p>傳統的 HTTP/1.1 在每個 TCP 連線中只允許向 server 發送單一個請求，但當網頁載入時，往往會需要向同一個伺服器發送多個請求（例如、圖檔、CSS、靜態檔、JS 等），因此為了要避開這樣的限制、加快載入的速度，瀏覽器會實作多個平行的（parallel） TPC 連線（每個瀏覽器實作不同，因此數量的上限也不同），以處理同時向伺服器發出的多個請求。&lt;/p>
&lt;p>在 HTTP/2 中則可在同一個 TCP 連線中進行多個請求和回應，並且可以由 server 主動推送資源給 client，而並非一定要透過 client 主動請求；此外支援 HTTP Header 的壓縮，減少資料傳數量；HTTP/2 也是使用 binary 的方式在傳輸資料。&lt;/p>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52276261390_2e9a555fdf_o.png"
max-width="100%"
max-height="100%"
class="gallery-image"
>&lt;/p>
&lt;hr>
&lt;h2 id="grpc-的四種類型">gRPC 的四種類型&lt;/h2>
&lt;ul>
&lt;li>Unary：類似傳統 API，client 發送 request 而 server 回傳 response&lt;/li>
&lt;li>Server Streaming：透過 HTTP/2，client 發送一次 request，而 server 可以回傳多次資料&lt;/li>
&lt;li>Client Streaming：client 發送多次資料，直到告知 server 資料傳完後，server 再給予 response&lt;/li>
&lt;li>Bi Directional Streaming：兩邊都用串流的方式傳送資料&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52275779856_85cbd8a2e2_o.png"
max-width="100%"
max-height="100%"
class="gallery-image"
>&lt;/p>
&lt;p>圖片來源：&lt;a class="link" href="https://www.udemy.com/course/grpc-golang/" target="_blank" rel="noopener"
>gRPC Golang - Master Class: Build Modern API &amp;amp; MicroServices&lt;/a> @ Udemy&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">service GreetService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Unary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rpc Greet(GreetRequest) returns (GreetResponse) {};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Streaming Server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rpc GreetManyTimes(GreetManyTimesRequest) returns (stream GreetManyTimesResponse) {};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Streaming Client
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse) {};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Bi-directional Streaming
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rpc GreetEveryone(stream GreetEveryoneRequest) returns (stream GreetEveryoneResponse) {};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="grpc-的缺點">gRPC 的缺點&lt;/h2>
&lt;ul>
&lt;li>Protocol Buffer 不像 JSON 是 Human Readable。&lt;/li>
&lt;li>需要額外的學習時間和導入成本。&lt;/li>
&lt;li>瀏覽器原生目前還不支援，須透過套件 &lt;a class="link" href="https://github.com/grpc/grpc-web" target="_blank" rel="noopener"
>grpc-web&lt;/a> 來處理。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="其他">其他&lt;/h2>
&lt;h3 id="推薦工具">推薦工具&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/uw-labs/bloomrpc" target="_blank" rel="noopener"
>BloomRPC&lt;/a>：方便用來模擬 Client 對 gRPC server 發送請求，功能就類似在 Restful 中使用的 Postman。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="錯誤排除">錯誤排除&lt;/h3>
&lt;p>&lt;strong>protoc-gen-go: program not found or is not executable&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 需要把 $GOPATH/bin 加到 .zshrc/.bashrc 等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export PATH=$PATH:$GOPATH/bin&amp;#39;&lt;/span> &amp;gt;&amp;gt; &lt;span class="nv">$HOME&lt;/span>/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://grpc.io/docs/languages/go/quickstart/" target="_blank" rel="noopener"
>Go Tutorial&lt;/a> @ &lt;a class="link" href="https://grpc.io/docs/languages/go/quickstart/" target="_blank" rel="noopener"
>gRPC.io&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://grpc.io/docs/what-is-grpc/introduction/" target="_blank" rel="noopener"
>Introduction to gRPC&lt;/a> @ gRPC.io&lt;/li>
&lt;li>&lt;a class="link" href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener"
>Protocol Buffers&lt;/a> @ Google Developer&lt;/li>
&lt;li>&lt;a class="link" href="https://www.udemy.com/course/grpc-golang/" target="_blank" rel="noopener"
>gRPC - Golang Master Class: Build Modern API &amp;amp; MicroServices&lt;/a> @ Udemy&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.microsoft.com/zh-tw/aspnet/core/grpc/comparison?view=aspnetcore-5.0" target="_blank" rel="noopener"
>比較 gRPC 服務與 HTTP API&lt;/a> @ Microsoft Docs&lt;/li>
&lt;/ul>
&lt;hr></description></item></channel></rss>