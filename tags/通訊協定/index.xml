<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>通訊協定 on 偉恩的部落格</title><link>https://www.wjdesign.ga/hugo-blog-wayne/tags/%E9%80%9A%E8%A8%8A%E5%8D%94%E5%AE%9A/</link><description>Recent content in 通訊協定 on 偉恩的部落格</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sun, 24 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.wjdesign.ga/hugo-blog-wayne/tags/%E9%80%9A%E8%A8%8A%E5%8D%94%E5%AE%9A/index.xml" rel="self" type="application/rss+xml"/><item><title>初學者都該了解的 HTTP 通訊協定基礎</title><link>https://www.wjdesign.ga/hugo-blog-wayne/p/%E5%88%9D%E5%AD%B8%E8%80%85%E9%83%BD%E8%A9%B2%E4%BA%86%E8%A7%A3%E7%9A%84-http-%E9%80%9A%E8%A8%8A%E5%8D%94%E5%AE%9A%E5%9F%BA%E7%A4%8E/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://www.wjdesign.ga/hugo-blog-wayne/p/%E5%88%9D%E5%AD%B8%E8%80%85%E9%83%BD%E8%A9%B2%E4%BA%86%E8%A7%A3%E7%9A%84-http-%E9%80%9A%E8%A8%8A%E5%8D%94%E5%AE%9A%E5%9F%BA%E7%A4%8E/</guid><description>&lt;img src="https://i.imgur.com/45Wpyuu.jpg" alt="Featured image of post 初學者都該了解的 HTTP 通訊協定基礎" />&lt;style>
.focus {
background: #f1e2e2;
color: #d62c2c;
padding: 0 5px;
}
&lt;/style>
&lt;p>&lt;a class="link" href="https://youtu.be/Taq5TV1K4XU" target="_blank" rel="noopener"
>參考網站 - 初學者都該學會的 HTTP 通訊協定基礎&lt;/a>&lt;br>
&lt;a class="link" href="https://totoroliu.medium.com/http-2-%E6%98%AF%E4%BB%80%E9%BA%BC-d7de699bdbae" target="_blank" rel="noopener"
>參考網站 - Http/2 是什麼?&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="目前-http-通訊協定的版本">目前 HTTP 通訊協定的版本&lt;/h2>
&lt;ul>
&lt;li>HTTP/0.9
&lt;ul>
&lt;li>於 &lt;strong>1991&lt;/strong> 年發表(已廢止)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP/1.0
&lt;ul>
&lt;li>於 &lt;strong>1996&lt;/strong> 年 &lt;strong>5&lt;/strong> 月發表(&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc1945" target="_blank" rel="noopener"
>RFC 1945&lt;/a>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP/1.1
&lt;ul>
&lt;li>於 &lt;strong>1997&lt;/strong> 年 &lt;strong>1&lt;/strong> 月發表(&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc2068" target="_blank" rel="noopener"
>RFC 2068&lt;/a>)&lt;/li>
&lt;li>於 &lt;strong>1999&lt;/strong> 年 &lt;strong>6&lt;/strong> 月發布 HTTP/1.1 更新版(&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc2616" target="_blank" rel="noopener"
>RFC 2616&lt;/a>)&lt;/li>
&lt;li>於 &lt;strong>2014&lt;/strong> 年 &lt;strong>6&lt;/strong> 月再次更新 HTTP/1.1 並將規格文件拆成六份&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP/2(&lt;a class="link" href="https://zh.wikipedia.org/zh-tw/HTTP/2" target="_blank" rel="noopener"
>Wikipedia&lt;/a>)
&lt;ul>
&lt;li>於 &lt;strong>2015&lt;/strong> 年 &lt;strong>5&lt;/strong> 月發布(&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7540" target="_blank" rel="noopener"
>RFC 7540&lt;/a>)(&lt;a class="link" href="https://caniuse.com/?search=http2" target="_blank" rel="noopener"
>瀏覽器相容性&lt;/a>)&lt;/li>
&lt;li>僅針對 HTTP/1.1 的 Message Syntax 部分作出強化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="http09-已廢止">HTTP/0.9 (已廢止)&lt;/h2>
&lt;h3 id="概要">概要&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>於 &lt;strong>1990&lt;/strong> 年由 Tim Berners-Lee 提出最初的 &lt;strong>HTTP&lt;/strong> 建議(&lt;strong>WWW&lt;/strong>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>實作重點&lt;/p>
&lt;ul>
&lt;li>用戶端要求是以 &lt;strong>ASCII&lt;/strong> 字元為主(單行命令即可發出請求 GET/)&lt;/li>
&lt;li>用戶端要求會以一個 &lt;strong>換行字元&lt;/strong> (CRLF) 來結束&lt;/li>
&lt;li>伺服器回應是以 &lt;strong>ASCII&lt;/strong> 字元為主，回應內容是 &lt;strong>HTML&lt;/strong> 文件&lt;/li>
&lt;li>每次執行完 Request / Response 就會自動關閉連線&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>主要特色&lt;/p>
&lt;ul>
&lt;li>Client / Server 架構、Request / Response 協定&lt;/li>
&lt;li>跑在 &lt;strong>TCP/IP&lt;/strong> 上的 &lt;strong>ASCII&lt;/strong> 協定 (要求/回應)&lt;/li>
&lt;li>被設計用來傳輸 &lt;strong>HTML&lt;/strong> 文件&lt;/li>
&lt;li>每完成一次 &lt;strong>ASCII&lt;/strong> 協定就會自動關閉連線&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="使用-bash-測試">使用 bash 測試&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 建立連線到 google&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ telnet google.com &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Connected to google.com.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Escape character is &lt;span class="s1">&amp;#39;^]&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 發送 GET 請求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ GET /about
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="http10">HTTP/1.0&lt;/h2>
&lt;h3 id="概要-1">概要&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>在 &lt;strong>1991&lt;/strong> 到 &lt;strong>1995&lt;/strong> 年之間，所謂 &lt;strong>瀏覽器&lt;/strong> 騰空出世！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>於 &lt;strong>1996&lt;/strong> 年 &lt;strong>5&lt;/strong> 月發表 &lt;strong>HTTP/1.0&lt;/strong> 版 (&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc1945" target="_blank" rel="noopener"
>RFC 1945&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>與 &lt;strong>HTTP/0.9&lt;/strong> 不同的部分&lt;/p>
&lt;ul>
&lt;li>用戶端要求是以 &lt;strong>ASCII&lt;/strong> 字元為主，但可發送多行命令(含要求標頭)
&lt;ul>
&lt;li>先送出&lt;strong>要求方法&lt;/strong>，再送出&lt;strong>要求標頭&lt;/strong>，最後以一個&lt;mark>額外的換行字元&lt;/mark>結束&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>伺服器回應是以 &lt;strong>ASCII&lt;/strong> 字元為主，回應內容會區分為
&lt;ul>
&lt;li>狀態列&lt;/li>
&lt;li>回應標頭&lt;/li>
&lt;li>回應內文主體(不僅僅是 &lt;strong>HTML&lt;/strong> 文件，可以是更多內容類型)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每完成一次 Request / Response 交握就會&lt;strong>自動關閉 TCP/IP 連線&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="使用-bash-測試-1">使用 bash 測試&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 建立連線到 google&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ telnet google.com &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Trying 172.217.24.14...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Connected to google.com.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Escape character is &lt;span class="s1">&amp;#39;^]&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 發送 GET 請求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ GET /about HTTP/1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.google.com &lt;span class="c1"># 因一個 domain 可以 hosting 多個網站，因此通常都會於 request header 再標記 Host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; HTTP/1.0 &lt;span class="m">301&lt;/span> Moved Permanently
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 取得後，會自動中斷 TCP 連線&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 若需再發送請求，需重新建立 TCP 連線&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ telnet google.com &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="http11">HTTP/1.1&lt;/h2>
&lt;h3 id="概要-2">概要&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>於 &lt;strong>1997&lt;/strong> 年 &lt;strong>1&lt;/strong> 月發表 &lt;strong>HTTP/1.1&lt;/strong> 版 (&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc1945" target="_blank" rel="noopener"
>RFC 1945&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>於 &lt;strong>1999&lt;/strong> 年 &lt;strong>6&lt;/strong> 月發布 &lt;strong>HTTP/1.1&lt;/strong> 更新版 (&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc2616" target="_blank" rel="noopener"
>RFC 2616&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>與 &lt;strong>HTTP/1.0&lt;/strong> 不同的部分&lt;/p>
&lt;ul>
&lt;li>傳輸協議的效能改進(新增不少 HTTP 標頭定義)
&lt;ul>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_persistent_connection" target="_blank" rel="noopener"
>持續連線狀態&lt;/a>(persistent connection)&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_chunked_encoding_transfer" target="_blank" rel="noopener"
>切塊編碼傳輸&lt;/a>(chunked encoding transfer)&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_byte_range_request" target="_blank" rel="noopener"
>位元範圍請求&lt;/a>(byte range request)&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_cache_control" target="_blank" rel="noopener"
>額外快取機制&lt;/a>(cache control)&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_request_pipelining" target="_blank" rel="noopener"
>請求管線作業&lt;/a>(request pipelining)(需搭配&lt;strong>持續連線狀態特性&lt;/strong>才能用)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="使用-bash-測試-2">使用 bash 測試&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 建立連線到 google&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ telnet google.com &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Trying 172.217.24.14...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Connected to google.com.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Escape character is &lt;span class="s1">&amp;#39;^]&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 發送 GET 請求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ GET /about HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.google.com &lt;span class="c1"># 因一個 domain 可以 hosting 多個網站，因此通常都會於 request header 再標記 Host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; HTTP/1.0 &lt;span class="m">301&lt;/span> Moved Permanently
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 取得後，不會自動中斷 TCP 連線，可再發送請求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ GET /abc HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.google.com &lt;span class="c1"># 因一個 domain 可以 hosting 多個網站，因此通常都會於 request header 再標記 Host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; HTTP/1.1 &lt;span class="m">404&lt;/span> Page Not Found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="目前-http11-的六大規格">目前 HTTP/1.1 的六大規格&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7230" target="_blank" rel="noopener"
>RFC 7230&lt;/a> HTTP/1.1：Message Syntax and Routing&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>RFC 7231&lt;/a> HTTP/1.1：Semantics and Content(最重要)&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7232" target="_blank" rel="noopener"
>RFC 7232&lt;/a> HTTP/1.1：Conditional Requests&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7233" target="_blank" rel="noopener"
>RFC 7233&lt;/a> HTTP/1.1：Range Requests&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7234" target="_blank" rel="noopener"
>RFC 7234&lt;/a> HTTP/1.1：Caching&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7235" target="_blank" rel="noopener"
>RFC 7235&lt;/a> HTTP/1.1：Authentication&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="關於-http-通訊協定的基本常識">關於 HTTP 通訊協定的基本常識&lt;/h2>
&lt;ul>
&lt;li>無狀態特性(stateless)：相同的 request，都會得到相同的 response，不會因為狀態不同而改變&lt;/li>
&lt;li>分散式架構(distributed)：相同的 request，不同載體發送，都會得到相同的 response&lt;/li>
&lt;li>協作的架構(collaborative)：不一定只有 client / server，也可以是 client / proxy / reverse proxy / server&lt;/li>
&lt;li>超文本(hypertext = not just &amp;ldquo;text) but with &amp;ldquo;links&amp;rdquo;)：除了內容，還包含連結&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="初學者應了解-http-的基本運作方式">初學者應了解 HTTP 的基本運作方式&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>如何發出 HTTP 要求(HTTP Request)&lt;/p>
&lt;ul>
&lt;li>要求方法(Request Methods)
&lt;ul>
&lt;li>GET、POST、PUT、DELETE、PATCH、&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>要求標頭(Request Headers)
&lt;ul>
&lt;li>Connection、COntent-Type、&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>斷行符號(CRLF)&lt;/li>
&lt;li>要求內容主體(Request Body)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如何回應 HTTP 訊息(HTTP Response)&lt;/p>
&lt;ul>
&lt;li>回應狀態碼(Response Status Codes)
&lt;ul>
&lt;li>HTTP/1.1 &lt;code>200&lt;/code> OK&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>回應標頭(Response Headers)&lt;/li>
&lt;li>斷行符號(CRLF)&lt;/li>
&lt;li>回應內容主題(Response Body)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="http2">HTTP/2&lt;/h2>
&lt;h3 id="http2-各個瀏覽器的支援度">HTTP/2 各個瀏覽器的支援度&lt;/h3>
&lt;p>&lt;a class="link" href="https://caniuse.com/?search=HTTP%2F2" target="_blank" rel="noopener"
>點我查看瀏覽器支援度&lt;/a>&lt;/p>
&lt;p>Edge / Firefox / Chrome / Opera 皆在 2015 年起就支援 HTTP/2，基本上不需要太擔心主流瀏覽器的支援性問題。&lt;/p>
&lt;blockquote>
&lt;p>PS：&lt;a class="link" href="https://hieven.medium.com/http-2-%E5%BE%9E%E9%9B%B6%E5%88%B0%E4%B8%80-be221087cd35" target="_blank" rel="noopener"
>如何在 Node.js 中使用 HTTP/2&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="http2-改善了什麼">HTTP/2 改善了什麼？&lt;/h3>
&lt;p>http/2標準發布於2015年5月，其主要目的是透過一些措施改善瀏覽器瀏覽網頁 &lt;strong>加載的速度(page load)&lt;/strong> 。目前大多數的瀏覽器已支援 http/2 (chrome, firefox, safari等)標準，又 http/2與 http/1.1有著高度的相容信，舉凡request method(post, get..etc), http status code, url, header 等等，因此對於web developer來說，只需要確保你的網站有支援https(因為瀏覽器只支援https 在http/2上)。那麼http/1.1與http/2到底相差多快呢，&lt;a class="link" href="http://www.http2demo.io/" target="_blank" rel="noopener"
>點我體驗&lt;/a>!&lt;/p>
&lt;h3 id="http2-是如何改善">HTTP/2 是如何改善？&lt;/h3>
&lt;h4 id="只需要單一網路連線-single-tcp-connection">只需要單一網路連線 (Single TCP connection)&lt;/h4>
&lt;p>只需要單一網路連線，就可以連接網站伺服器，下載所有需要的資源。大大節省 HTTP/1.1 需要一直建立多個網路連線時的啟動時間浪費。&lt;/p>
&lt;h4 id="request-and-response-multiplexing-多路複用">Request and response multiplexing (多路複用)&lt;/h4>
&lt;p>在 http/1.1 中，client 端時常會同時發起多個 request 至 server 拿取檔案(像是js, css, image等)，以此方式達到快速載入頁面。如下圖在 http/1.1 中會同時與 server 建立3個 TCP connection，但是瀏覽器通常會限制 TCP connection 同時建立的數目。因此在 http/2 協定中，允許 client 端與同一 server 建立單一 TCP connection 並以非同步方式傳輸要的檔案。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/2Eh5TeI.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="優先權設計-prioritizationhttpsnghttp2orgblog20140427how-dependency-based-prioritization-works">優先權設計 (&lt;a class="link" href="https://nghttp2.org/blog/2014/04/27/how-dependency-based-prioritization-works/" target="_blank" rel="noopener"
>Prioritization&lt;/a>)&lt;/h4>
&lt;p>伺服器可以決定例如 CSS 或 JavaScript 檔案，哪些要優先傳送。&lt;/p>
&lt;h4 id="header-compression-標頭壓縮">Header compression (標頭壓縮)&lt;/h4>
&lt;p>每一個 http 的傳輸中都會攜帶一組 header，在 http/1.1 中，header 會是以明文(plain text)傳輸大小通常會是500-800 bytes，若有攜帶 cookie 也有可能會更大。因此在 http/2 中，會將 request 以及 response 的 header 使用 &lt;a class="link" href="https://http2.github.io/http2-spec/compression.html" target="_blank" rel="noopener"
>HPACK&lt;/a> 演算法壓縮 header 的內容，此方法壓縮後可以減少 85%-88% 的大小。&lt;/p>
&lt;h4 id="server-push-伺服器推送">Server push (伺服器推送)&lt;/h4>
&lt;p>在 http/1.1 中，通常 client 端 request 甚麼 server 就會回傳甚麼，例如: 當 client request html 那麼 server 將只會回傳 html。但在 http/2 中，允許 server 主動推送有相關的資料給 client，例如: 當 client 只 request html，但是 server 知道 client request 此 html 後續也會 request css, js 等，因此 server 就會在 client 沒有 request 的情況下主動推送 css, js 檔給 client。那 server 怎麼知道這些檔案是有相關性的呢? web developer 將需要 server push 的檔案加上特定的描述即可。(&lt;a class="link" href="https://www.smashingmagazine.com/2017/04/guide-http2-server-push/" target="_blank" rel="noopener"
>描述&lt;/a>)&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9l0z0QZ.png"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>不過，這個功能比較有爭議，一來他需要 Web 開發者額外描述有哪些檔案需要隨著 HTML 一起推送給瀏覽器，不是 Web 伺服器升級 HTTP/2 就自動會有。二來它不管瀏覽器是不是已經有快取這個資源，都會推送而造成頻寬浪費。因此實務上筆者認為可以改用瀏覽器的 &lt;a class="link" href="https://css-tricks.com/prefetching-preloading-prebrowsing/" target="_blank" rel="noopener"
>Prefetch&lt;/a> 功能，讓客戶端的瀏覽器自己處理即可。&lt;/p>
&lt;/blockquote>
&lt;h4 id="binary-framing-layer-二進制影格層">Binary framing layer (二進制影格層)&lt;/h4>
&lt;p>在 http/2 中，header 與 body 所挾帶的 property 與 http/1.1 相同(ex. verbs, methods)，然而兩者在傳輸上會有不同。在 http/2 中，會將 header 以及 body 編碼成二進制在 server 與 client 端中傳輸，在 http/1.1 中，則是以明文的方式傳輸。將訊息編碼成二進制進行傳輸，此特性是 http/2 的其他特性的根本基礎。&lt;/p>
&lt;blockquote>
&lt;p>冷知識：在 HTTP/1.1 定義了&lt;a class="link" href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4" target="_blank" rel="noopener"
>四種解析訊息的方式&lt;/a>，在 HTTP/2 只需要一種。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.imgur.com/rmkeii5.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="總結">總結&lt;/h3>
&lt;p>根據 &lt;a class="link" href="https://w3techs.com/technologies/details/ce-http2" target="_blank" rel="noopener"
>w3Techs&lt;/a> 網站，目前使用http/2的網站有45.7%，未來確實會變成主流，身為軟體工程師，還是多少理解來的好。此篇文章僅記錄筆者蒐集資料彙整結果，若有任何錯誤資訊還請直接點出，萬分感謝。&lt;/p>
&lt;hr></description></item></channel></rss>