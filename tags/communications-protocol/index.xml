<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>communications-protocol on Wayne's blog | 偉恩的部落格 | 技術博客</title><link>https://wayneblog.ga/tags/communications-protocol/</link><description>Recent content in communications-protocol on Wayne's blog | 偉恩的部落格 | 技術博客</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Tue, 17 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://wayneblog.ga/tags/communications-protocol/index.xml" rel="self" type="application/rss+xml"/><item><title>網站前端打 API 時把密碼加密，有意義嗎？</title><link>https://wayneblog.ga/2023-01-17/why-encrypt-in-client/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://wayneblog.ga/2023-01-17/why-encrypt-in-client/</guid><description>&lt;img src="https://live.staticflickr.com/65535/52634831533_259566b84f_o.jpg" alt="Featured image of post 網站前端打 API 時把密碼加密，有意義嗎？" />&lt;style>
.article-content p code {
background-color: #f5f5f5;
color: #ff3860;
}
.focus {
background: #f1e2e2;
color: #d62c2c;
padding: 0 5px;
}
&lt;/style>
&lt;p>&lt;a class="link" href="https://www.facebook.com/groups/f2e.tw/posts/5689037364466915" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;br>
&lt;a class="link" href="https://ithelp.ithome.com.tw/questions/10211642" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;br>
&lt;a class="link" href="https://www.sjoerdlangkemper.nl/2020/02/12/the-case-for-client-side-hashing-logging-passwords-by-mistake/" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;br>
&lt;a class="link" href="https://blog.huli.tw/2023/01/10/security-of-encrypt-or-hash-password-in-client-side/?fbclid=IwAR3KXQ6gSgO1uxzAhtplhEs-AtQ5KIg2GR0HRaKcbMewUrWgEi6JGas48T8" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;/p>
&lt;p>最近有人在臉書前端交流社群發了&lt;a class="link" href="https://www.facebook.com/groups/f2e.tw/posts/5689037364466915" target="_blank" rel="noopener"
>一則貼文&lt;/a>，內容是他看到了一個問題：&lt;a class="link" href="https://ithelp.ithome.com.tw/questions/10211642" target="_blank" rel="noopener"
>請問登入api傳賬號、密碼json明碼會有問題嗎?&lt;/a>，想知道大家對這個問題的看法。&lt;/p>
&lt;p>而底下的回答大部份都是覺得「&lt;strong>有用 HTTPS 就好了，沒必要額外再實作一層加密，沒有什麼太大的意義&lt;/strong>」.&lt;/p>
&lt;p>老實說我以前也是這樣認為的，而且過去在社群中就有出現過類似的討論。我那時候想說都已經有 HTTPS 了，而 HTTPS 本身的目的就是為了保障傳輸的安全，為什麼要自己再做加密？&lt;/p>
&lt;p>但這一兩年接觸資安以後，我的想法有了改變，我認為前端在傳輸前把密碼加密，是有其意義的，而接下來我會詳細說明我的理由。&lt;/p>
&lt;hr>
&lt;h2 id="定義問題">定義問題&lt;/h2>
&lt;p>在進入正題之前，我想把問題定義得更明確一點，免得出現一堆張飛打岳飛，拿兩個完全不同的情境來比較的狀況。在原文底下，就有不少留言在討論的是不同的問題，把問題先定義清楚滿重要的。&lt;/p>
&lt;p>首先，我們要比較的對象是：&lt;/p>
&lt;ol>
&lt;li>在使用 &lt;strong>HTTPS&lt;/strong> 的前提下，打登入 API 時不做任何事直接傳送密碼的明文&lt;/li>
&lt;li>在使用 &lt;strong>HTTPS&lt;/strong> 的前提下，打登入 API 時先把密碼加密，再傳送到 server&lt;/li>
&lt;/ol>
&lt;p>這邊需要注意的是「&lt;strong>兩個狀況都是 HTTPS&lt;/strong>」，所以如果你想講的是「&lt;strong>沒必要自己發明新技術&lt;/strong>」或是「&lt;strong>自己發明新的加密方式不會比較安全&lt;/strong>」等等，在這個前提下全都不適用。&lt;/p>
&lt;p>因為傳輸層還是靠 &lt;strong>HTTPS&lt;/strong> 在傳輸，所以在這個階段並沒有自己發明新的方式，我只是在應用層自己把傳輸的資料額外加密一層而已。&lt;/p>
&lt;p>再來，先不考慮成本這件事，純粹只從技術的角度去看可能有哪些優缺點(成本相關的最後再來討論)。&lt;/p>
&lt;p>最後呢，我這邊的情境是「&lt;strong>加密密碼&lt;/strong>」而非 hash，這是因為我覺得 hash 的狀況比較複雜，我自己想先用加密來舉例，而且這個加密是「&lt;strong>非對稱式加密&lt;/strong>」。&lt;/p>
&lt;p>也就是我們可以想像已經有一把 public key 存在於 client 端(當然，每個人都可以拿得到)，在送出 request 以前，會先使用 JavaScript 把密碼用 public key 加密以後再送出，而 server 使用 private key 解密，拿到密碼以後 hash 過再存入資料庫中。&lt;/p>
&lt;p>綜合以上，這篇想處理的問題是：「&lt;strong>已經使用了 HTTPS，在打登入 API 以前先把密碼加密過或是不做任何處理，這兩者的差別在哪？&lt;/strong>」&lt;/p>
&lt;p>而我們可以把回答分成兩個部分：&lt;/p>
&lt;ol>
&lt;li>假設 HTTPS 被破解了，是不安全的，差在哪？&lt;/li>
&lt;li>假設 HTTPS 是安全的，差在哪？&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="假設-https-不安全差在哪">假設 HTTPS 不安全，差在哪？&lt;/h2>
&lt;p>首先，可以先想一下怎樣的狀況會造成 HTTPS 不安全，攻擊者掌握了系統的哪些部分？&lt;/p>
&lt;p>底下簡單分為四種狀況討論：&lt;/p>
&lt;ol>
&lt;li>攻擊者掌控整台電腦，信任惡意憑證&lt;/li>
&lt;li>攻擊者成功執行了中間人攻擊&lt;/li>
&lt;li>攻擊者可以在網路層監聽 request 並使用漏洞取得明文&lt;/li>
&lt;li>攻擊者直接針對 HTTPS server 進行攻擊&lt;/li>
&lt;/ol>
&lt;h3 id="攻擊者掌控整台電腦信任惡意憑證">攻擊者掌控整台電腦，信任惡意憑證&lt;/h3>
&lt;p>若是這種類型的狀況，那當然是有沒有加密都沒差，因為攻擊者都有其他更好的手段去取得你的密碼。&lt;/p>
&lt;h3 id="攻擊者成功執行了中間人攻擊">攻擊者成功執行了中間人攻擊&lt;/h3>
&lt;p>那如果是「攻擊者成功執行了中間人攻擊（Man-In-The-Middle）」呢？你的電腦沒事，只是封包在傳輸的過程中被中間人攻擊。&lt;/p>
&lt;p>在這樣的前提底下，沒加密的情形就能直接被獲取密碼，而有加密的情形攻擊者只能獲取到加密過的密文而非明文。但需要注意的是既然是叫中間人攻擊，那攻擊者除了監聽你的 request 以外，也能傳送偽造的 response 給你，把前端用來加密密碼的部分換掉。&lt;/p>
&lt;p>因此無論密碼是否加密，攻擊者都可以拿到明文，只是如果有加密的話，攻擊者取得密碼的成本較高（需要先找到在哪邊加密的，然後把那段改掉）。&lt;/p>
&lt;h3 id="攻擊者可以在網路層監聽-request-並使用漏洞取得明文">攻擊者可以在網路層監聽 request 並使用漏洞取得明文&lt;/h3>
&lt;p>這個狀況跟上一個的不同之處在於這個只能讀，不能寫。若是有辦法解密 request 的封包，就能夠看到明文。&lt;/p>
&lt;p>所以如果有把密碼先加密，攻擊者就無法取得密碼的明文。&lt;/p>
&lt;p>這邊需要注意的是儘管無法取得明文，攻擊者依然可以透過重送請求來登入你的帳號（先假設沒有其他機制），所以你帳號還是被盜了，只是攻擊者不知道你的密碼明文。&lt;/p>
&lt;p>這有差嗎？有！&lt;/p>
&lt;p>假設他知道了你的密碼明文，就可以拿你的這組帳號密碼去各個服務都試試看，若是你其他網站也用同一組帳號密碼，就會跟著淪陷（俗稱的撞庫攻擊）。&lt;/p>
&lt;p>因此在這個狀況底下，加密密碼的安全性顯然是更高的。&lt;/p>
&lt;p>此時你可能會想問的問題是：「那在什麼狀況下攻擊者能夠取得 HTTPS 的明文？真的有可能嗎？」&lt;/p>
&lt;p>這邊有一份美國衛生及公共服務部 HHS 所做的簡報：&lt;a class="link" href="https://www.hhs.gov/sites/default/files/securing-ssl-tls-in-healthcare-tlpwhite.pdf" target="_blank" rel="noopener"
>SSL/TLS Vulnerabilities&lt;/a>，裡面有記錄一些 SSL/TLS 曾經有過的漏洞，所以取得 HTTPS 的明文確實是有可能的。&lt;/p>
&lt;p>不過光是知道「有可能」是不夠的，應該問的是「機率高嗎？」，在討論風險的時候，通常也會根據風險的高低以及嚴重程度來決定該怎麼處理這個風險。&lt;/p>
&lt;p>答案是「機率很低」，簡報裡的漏洞最近的已經是 2017 年的事情了，而且是使用一些舊的、有問題的加密演算法，除此之外還需要符合不少其他條件，才能執行攻擊，所以我認為機率確實是很低的。&lt;/p>
&lt;p>以 2016 年發表的 &lt;a class="link" href="https://drownattack.com/" target="_blank" rel="noopener"
>DROWN(Decrypting RSA with Obsolete and Weakened eNcryption)&lt;/a> 來說，Server 要支援 SSLv2，而攻擊者要能抓到加密過的 TLS connection，符合這些條件以後，進行一大堆運算後就可以解開 900 個 connection 中的 1 個，而運算成本在當時是 440 美金，約 13k 台幣。&lt;/p>
&lt;p>總之呢，針對這個狀況，我們可以說：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>假設攻擊者可以取得 HTTPS 的明文，那確實自己在應用層加密會更安全，但要符合這個假設的成本很高，發生機率很低&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h3 id="攻擊者直接針對-https-server-進行攻擊">攻擊者直接針對 HTTPS server 進行攻擊&lt;/h3>
&lt;p>這個分類我指的是在 2014 年發生過的 &lt;a class="link" href="https://devco.re/blog/2014/04/11/openssl-heartbleed-how-to-hack-how-to-protect/" target="_blank" rel="noopener"
>Heartbleed 漏洞&lt;/a>，攻擊者可以藉由 OpenSSL 的漏洞讀取到 server 的記憶體。&lt;/p>
&lt;p>這個狀況跟上一個滿像的，如果有在 client 端先加密過密碼，那攻擊者在 server 上讀到的就是加密過後的，不知道密碼明文是什麼。&lt;/p>
&lt;p>所以結論跟上個一樣，就是加密密碼會更安全。&lt;/p>
&lt;hr>
&lt;h2 id="中場總結">中場總結&lt;/h2>
&lt;p>剛剛我們討論了幾種「HTTPS 變得不安全」的狀況，從以往發生過的案例可以得知「HTTPS 變得不安全」是有可能的。若是攻擊者能夠讀到 HTTPS 傳輸的明文，那在應用層將密碼加密，就能防止攻擊者取得密碼的明文，因此會比沒有加密來得更安全。&lt;/p>
&lt;p>如果要講得更詳細，可以從兩個維度去切入，一個是嚴重性（severity），另一個是可能性（possibility）。&lt;/p>
&lt;p>以嚴重性來說，不管有沒有加密密碼，只要攻擊者有辦法拿到 request 的內容，你的帳號就已經淪陷了，而有沒有加密唯一的差別只有攻擊者是否能取得明文密碼，有的話就可以執行撞庫攻擊，拿密碼去試更多其他的網站。&lt;/p>
&lt;p>而可能性就是「HTTPS 的明文被拿到」這件事的可能性，從過往的經歷以及研究來看，雖然是有可能的，但在 2023 年的今天，機率是很低的。&lt;/p>
&lt;p>因此我們現階段的結論應該是：&lt;/p>
&lt;p>攻擊者若是可以繞過 HTTPS 拿到明文的 request，那在應用層將密碼加密，確實會比較安全，但要注意的是要達成這個前提非常困難，發生的機率極低。&lt;/p>
&lt;hr>
&lt;h2 id="假設-https-是安全的">假設 HTTPS 是安全的&lt;/h2>
&lt;p>接下來我們討論第二種狀況，那就是假設 HTTPS 是安全的，沒有任何人可以從中間看到明文的內容，這應該也是留言區中大多數人假設的前提。&lt;/p>
&lt;p>在這種狀況下，會有哪些風險呢？&lt;/p>
&lt;p>有一個現實生活中會發生，而且也確實發生過的風險，那就是 &lt;strong>logging&lt;/strong>。&lt;/p>
&lt;p>身為前端工程師，在前端加裝一些 error tracking 的服務是很合理的事情，若是我們直接實作一個「&lt;strong>只要伺服器回傳 5xx，就把 request 記錄起來&lt;/strong>」的機制，如果好巧不巧哪天登入的 API 出現這個狀況，你就可以在 log 裡面看到使用者的明文密碼。&lt;/p>
&lt;p>而且不只前端，後端也可能有類似的機制，碰到一些問題就把 request 整個寫到 log 檔去，方便以後查看以及 debug，一不小心密碼就可能被寫進去。&lt;/p>
&lt;p>在這種狀況下，在 client 端先把密碼加密顯然是有好處的，那就是在這些錯誤處理的 log 中，被記錄下來的密碼會是密文，除非你有密鑰，否則你是不會知道使用者的密碼的。&lt;/p>
&lt;p>我在網路上找到一篇跟我論點一樣的文章：&lt;a class="link" href="https://www.sjoerdlangkemper.nl/2020/02/12/the-case-for-client-side-hashing-logging-passwords-by-mistake/" target="_blank" rel="noopener"
>The case for client-side hashing: logging passwords by mistake&lt;/a>，裡面有附上很多參考連結，都是以前各大公司不小心把密碼的明文記錄下來的案例。&lt;/p>
&lt;p>然後有個小地方稍微講一下，上面這篇做的是「在 client 端 hash」，跟我這篇一開始設定的「在 client 端做非對稱式加密」有點不同，hash 會更安全一點，確保在 server 真的沒人知道你的密碼明文是什麼。&lt;/p>
&lt;p>總之呢，在 client 端先把密碼加密或是 hash，可以避免在日誌中不小心出現使用者的密碼明文，這個顯然是個額外的優點。&lt;/p>
&lt;hr>
&lt;h2 id="加密還是-hash">加密還是 hash？&lt;/h2>
&lt;p>文章開頭我有提到 hash 的狀況有些複雜，所以我先把情境設定在「對密碼做非對稱式加密」再傳輸，因為對上面我舉的那些例子而言，這兩種情境的差異不大。&lt;/p>
&lt;p>舉例來說，HTTPS 被拿到明文內容，無論你對密碼做了非對稱式加密還是雜湊，在攻擊者無法取得伺服器端密鑰的前提之下，都是拿不到明文密碼的。&lt;/p>
&lt;p>那為什麼 hash 的狀況有些複雜呢？&lt;/p>
&lt;p>假設我們在前端先把密碼 hash 過後再傳到後端，那後端是要直接存進去資料庫嗎？如果直接存進去資料庫，哪天資料庫的內容曝光，攻擊者就拿到這些 hash 過的密碼了。&lt;/p>
&lt;p>通常在有加鹽以及雜湊演算法夠強的前提之下，被拿到 hash 的密碼還是能保證一定的安全性，可是在這種情況下，反而變得很不安全。&lt;/p>
&lt;p>因為前端傳給後端的內容已經是 hash 過的了，所以攻擊者可以直接拿 hash 過的密碼進行登入，根本不用知道明文是什麼。雖然保護了明文，但失去了原本雜湊的安全性。&lt;/p>
&lt;p>因此如果要做 client side hashing，server side 收到後也要再做一次。如此一來，就算資料庫被偷走，攻擊者也沒辦法利用資料庫中的 hash 直接登入。&lt;/p>
&lt;p>有些人可能跟我一樣好奇：「做兩次 hash 不會更不安全嗎？」，我們可以看一下 Google 在 &lt;a class="link" href="https://cloud.google.com/static/solutions/modern-password-security-for-system-designers.pdf" target="_blank" rel="noopener"
>Modern password security for system designers&lt;/a> 裡面怎麼說：&lt;/p>
&lt;blockquote>
&lt;p>Have the client computer hash the password using a cryptographically secure algorithm and a unique salt provided by the server. When the password is received by the server, hash it again with a different salt that is unknown to the client. Be sure to store both salts securely. If you are using a modern and secure hashing algorithm, repeated hashing does not reduce entropy.&lt;/p>
&lt;/blockquote>
&lt;p>看起來是還好，問題不大。&lt;/p>
&lt;p>總之呢，看起來最安全的但也更複雜的解法就是 client side 先 hash 一次，然後丟到 server 的時候再 hash 一次存進資料庫，如此一來就可以保證：&lt;/p>
&lt;ol>
&lt;li>HTTPS 因為各種原因失效時，攻擊者無法取得明文密碼&lt;/li>
&lt;li>在 Server 端，沒有任何人知道使用者的明文密碼&lt;/li>
&lt;li>明文密碼不會因為人為失誤被記錄到 log 中&lt;/li>
&lt;/ol>
&lt;p>那如果真的比較好用，為什麼沒人在用？&lt;/p>
&lt;hr>
&lt;h2 id="現實生活中到底有誰在前端做-hash-或是加密">現實生活中，到底有誰在前端做 hash 或是加密？&lt;/h2>
&lt;p>當我一開始碰到這個問題，講出「怎麼沒人在用」的時候，其實只是「我自己沒碰過有人這樣用」，但實際上我並不知道那些知名網站的登入是怎麼做的。&lt;/p>
&lt;p>因此呢，我就直接去看了幾個知名網站的登入機制，我們一起來看一下結果，為了方便觀看，我把跟帳號密碼無關的內容都拿掉了。&lt;/p>
&lt;p>我在測試的時候，基本上都是用 test 或是 &lt;a class="link" href="test@test.com" >test@test.com&lt;/a> 搭配簡單的密碼如 1234 在測試，然後觀察 request 的內容。&lt;/p>
&lt;p>先來看一下 FAANG 吧！&lt;/p>
&lt;h3 id="facebook">Facebook&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://zh-tw.facebook.com/login" target="_blank" rel="noopener"
>https://zh-tw.facebook.com/login&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>test@test.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">encpass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="c1">#PWD_BROWSER:5:1673256089:AbJQAJUvZZNvh2dZbeDqdu9dp7HWwyHOl3+0sCGjiHMMjvYdxJokpdHE/O+E5LIbnakRmDWQfV40ZaB31MaNXFYo1b+RI+LHh6MAdDPa4PJ+BesDp4u8B4F4diVQ+q7idbEhT5wTNaU=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>沒想到 Facebook 就是有實作前端加密的網站！後面那段 Base64 並不是直接把密碼 Base64，而是把加密過的密碼做 Base64，解出來是這樣：&lt;code>\x01²P\x00\x95/e\x93o\x87gYmàêvï]§±ÖÃ!Î\x97\x7F´°!£\x88s\f\x8Eö\x1DÄ\x9A$¥ÑÄüï\x84ä²\x1B\x9D©\x11\x985\x90}^4e wÔÆ\x8D\\V(Õ¿\x91#âÇ\x87£\x00t3Úàò~\x05ë\x03§\x8B¼\x07\x81xv%Pú®âu±!O\x9C\x135¥&lt;/code>&lt;/p>
&lt;h3 id="amazon">Amazon&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://www.amazon.com/ap/signin" target="_blank" rel="noopener"
>https://www.amazon.com/ap/signin&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>test@test.com&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="nv">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="apple">Apple&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://idmsa.apple.com/appleauth/auth/signin" target="_blank" rel="noopener"
>https://idmsa.apple.com/appleauth/auth/signin&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;accountName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test@test.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="netflix">Netflix&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://www.netflix.com/tw/login" target="_blank" rel="noopener"
>https://www.netflix.com/tw/login&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">userLoginId&lt;/span>&lt;span class="o">=&lt;/span>test@test.com&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="nv">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="google">Google&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://accounts.google.com/v3/signin/_/AccountsSignInUi/data/batchexecute" target="_blank" rel="noopener"
>https://accounts.google.com/v3/signin/_/AccountsSignInUi/data/batchexecute&lt;/a>.&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">f.req=[[[&amp;#34;14hajb&amp;#34;,&amp;#34;[1,1,null,[1,null,null,null,[\&amp;#34;1234\&amp;#34;,null,true]]]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看來 FAANG 裡面，只有 Facebook 是有實作的。&lt;/p>
&lt;p>接著我突然好奇起其他常用服務的登入有沒有做，底下貼結果。&lt;/p>
&lt;h3 id="github">GitHub&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://github.com/session" target="_blank" rel="noopener"
>https://github.com/session&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">login&lt;/span>&lt;span class="o">=&lt;/span>test@test.com&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="nv">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="microsoft">Microsoft&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://login.live.com/ppsecure/post.srf" target="_blank" rel="noopener"
>https://login.live.com/ppsecure/post.srf&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">login&lt;/span>&lt;span class="o">=&lt;/span>test@test.com&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="nv">passwd&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ibm-cloud">IBM cloud&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://cloud.ibm.com/login/doLogin" target="_blank" rel="noopener"
>https://cloud.ibm.com/login/doLogin&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test@test.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看來有實作的是少數，那資安廠商呢？資安廠商自己有做嗎？&lt;/p>
&lt;p>&lt;strong>資安廠商&lt;/strong>&lt;/p>
&lt;h3 id="kaspersky">Kaspersky&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://eu.uis.kaspersky.com/v3/logon/proceed" target="_blank" rel="noopener"
>https://eu.uis.kaspersky.com/v3/logon/proceed&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;login&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test@test.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;12345678&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="趨勢">趨勢&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://sso1.trendmicro.com/api/usersigninauth" target="_blank" rel="noopener"
>https://sso1.trendmicro.com/api/usersigninauth&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;email&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test@test.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;12345678&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="tenable">Tenable&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://cloud.tenable.com/session" target="_blank" rel="noopener"
>https://cloud.tenable.com/session&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="proton">Proton&lt;/h3>
&lt;p>這個應該不算資安廠商，但突然很好奇強調隱私的 Proton 是怎麼做的，一看發現好像很複雜。&lt;br>
在登入的時候會先把 username 送過去，拿到一些看起來是 key 的東西。&lt;/p>
&lt;p>API 網址：&lt;a class="link" href="https://account.proton.me/api/auth/info" target="_blank" rel="noopener"
>https://account.proton.me/api/auth/info&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;Username&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test@test.com&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Modulus&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nu9K5yr97L9VV2ijOSI62tJcewUiRhQa8qJa24baNpGyw0lf3JLiF4fxUHqTErwF9UdoxE0z4Kb147naphylBFddyKsjhzHNcxk2rBw9haiPxD69BrVYm0n+LVlPqmjXFF7btr1H7oqHGX4b4Dy9omL/KaZz/Dco2NEhw0UBhEZbTAs6Ch01ur9XLbSOI7yb6MRsqCehfy82gDTdbPtXvqQsQjg5XoC2Ib2qTYFaU/24mq/gOaMbVuAGX0hBYzr5NpN9ol2XCdHOLg28Xe90+kisg39VV04axy7Ndvh489dC1CxjcWSSpXd6cPJyOn/HH9aPeTZeucBllRGbPgwR6/w==\n-----BEGIN PGP SIGNATURE-----\nVersion: ProtonMail\nComment: https://protonmail.com\n\nwl4EARYIABAFAlwB1j0JEDUFhcTpUY8mAAD1GwEAoC91QCSfXPEuWM13NZvy\nvL9NQIABuSrVOvgJwMhUTnUBAPb4zbIdTYFOQNrPLvonJt2mmRNy4lGcW7uN\n5yHzJ18J\n=Oykn\n-----END PGP SIGNATURE-----\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ServerEphemeral&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;DY6eRYM1bqYZZ5jzZFdWv88tKYP2PnS0y4A+f7/eqMXj8wB2VefV2kfIDrZ5AorWfDzBq4wMtNG2k5dzbT2qWppzpvltrSl2Nm4i8eWIRVxXWHl/46dGuPXFHUcXBNMP3XEQvft0YEbHOPO9Es0RZRaObV5XPFyx6kzOJxXc1tIt4PfbhODMfsAoy/yxt6eLN3HUiORCBOvzsH2sfG99Gx1YSAe3GL6g/K+bdg59eglueXRESoB0/VFRsvQevi9nVXx/JZNTG0U4BBUOlMjpYYMgEP6eQgZZ/09ZPYD3a2tW65mSnNt6lSDfwiKj02UuDqymTvj7mYm44T0SuAocwg==&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Salt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;dI7OcD+K4rGPBA==&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;SRPSession&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;3fa6224285409b6af07c811971e05341&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接著輸入密碼登入時，會送出如下的 request，看起來也很複雜：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ClientProof&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;I9Nfd0Nd3OzODf2nt9zLxFHWogEwfRje8zjoeZnblyLfyzz23uXTjJ4qgRFomjIEEtZrlM1jTQa4wRIMGIIV7E6pMqq8c6wcc2tegP4Xt76S0EbnVtE1F9i0Wj46aCPUM0Mha3Zmgi9LKerrGlaftr2FBedjPFT9rPrbLqRQcFNMD33tn69gD/p28q4RAr3/7d/tz7TYhytD5oxCAUwrkqiZOi0kg//2mUJ9YNT2nWcgqUERoaU51NbNMcaPnMteEe1PlIJdiQbvNa5K07u8rk7itpBrGW2FP26bREp0UMTzNYM5HcDDkmp4dp9GoBjFJL9n0THUdt/oRRJ/Enj5WQ==&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ClientEphemeral&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;D013N7FXYHylqMeWa6ctJIv3J4uF1hqodyYfw6O+Sj7MZOIB+wksfgk/nkXCmRxQhuSYwqwMJIpyFD3MEolOZAHMU2n6HQlxe9A4KbrE4gk3UiGwfgcZDmFejTmMMxfWhf4zO2Z1fBbohreqwwN0mz3AqqsfE5dsDh3LEfkiJB449YGZfHeUHyIzS1jTmnx/8l6uVSKwJDCJelVFYKMXrxVt0ltcGRoYD92MUj82kR0am+BN4+djHyYYXuwuIYArnTW4kDP3T2yCIAMVgZnFaUCc2gfynt40mQP4q87jmMELOl8TDIDo5iKyH4gJc/470qIuIyj4ffVLiZ7t8S+kcw==&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;SRPSession&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;3fa6224285409b6af07c811971e05341&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Username&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test@test.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Payload&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;qcA_CRYU6gSyHWdn&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;c6UZSKPo4Sfm/3+DvQN72TTxyj+/TplKT9edDiUI5wMfGUsoJs9FGerOtkoW8T49r7KOvqHkzS2+M2v8ra7J9l5kSf5jgC9ZvgZ8Ja5Xgg02nxgAABydOirGLoL4htFsYVtwLrNg8NeSEanLwYLCVaSqkjANRJks0eaKpUOd8xRhCFtUH/GCbyg27oZfzDsqKXemKprOUsOh42NTqzEmruAkxs2x8mUsLy/vXptVAdaiJLrsSRqD0YBGjvOp4W2/0g6V2zfedJpJEzVwtSi1vXTC5bwxmEJlYdV9AiQECogAAJFxLQi7JjtmgFe4tNcv97JD0B8giZ6XS35swjz0vz0mOjVBUwmiDa8n54Y5kBaAoZe5pijdp2S4SOcRAknDIcD1nf0v7oSMOE9WtH/sa+XI1D2s5lFKo/iInf7r5R9src2hHFoy0b2XT0oCfLPwFX87yjaKbf7bbkjByx/3dOgzEliAkS6nHK+fmeDDVM4EoZqVSKZHLg3QTcg4DKaICyDsotALr2UqI/ARzkX4yhAXz5xHFaxl6hWAKLJPJcgk6il6oX0s0PCBNSY0Fi3vbQvXD4WalUx+LBNto6CUqeAIzVuAh8sCubzufoSORypE5WqfnuJzAlZ9sMEjaQycuRi497aV3jmjgx53UwO0OiZGxDTEMFBcov4P0g1blZ4vxmULhZU0RfdP31udLr6GTCAB90CM6Vk9w9CsYM+hmo3+JpEAtIVgLVVqcPikTbV+yaOJ1RknxBf3g06kTl0LQ+zBV6pG2rFVi8G4XT9L4FsIgxTNsl/ryzs8vJU7K+HvyE1Lp2pAXrfcju7TAIqK/FOXvp1c8Ay9O6d4fmd/PZalnRDv5mQ6Gmd6JSNzNh6i6AibBuF13w3OBaulY3FGNU/cH/AXLBIqjSzf/OySwkKkC9HBurSs3D0zqcH9BwUpmPEL8jbc8yPE+hPAim+tDo1BXCQNClxgGLaI6FXkuCiQ4AHiKsq0xs5b3WAFzcvBv1rc003RWxRegH/2teIooKU9w1kDPQRaK8/rIYe8u+BlBeZq4OwCXxx56JHfmTxtJwBi95KqsWzLGtY3ILcb+/XkzSRmE2TWbkW1IXzRsl8F6NSJj7JnHA3UrQf4hxuwbaYxpKJrcHuHc8e1wxqXrUSKooCOUxwSBgxvLLT37eaByNTxpfWomxIsH671wuydnmMedWyNIqyaMtxBORuiWUiG4jbMC2BjrVptXJ7VWigf3Vy5OQlMOyTx8tLWi1qZODYyywMBAvHYQlFfSqmIrm4y4dmK/srJE/+daEnNS+kWF48Jm/rQORO5AUwqWL+Lefg9pchcL1BnHOANcviO8pAkxLo8TiK7VLKI5/xUsZQoQSlhRt27zMF+sIv+exY375HApiY+a1VQ6OqE4Nvba7O8ETLoLFg4a8Aj+W8erXFHW5F0vVIRphAve9orM4QYnAmOigFAiLb0Pxx124wUjFR9s5oP98hAtNL/t+uGAXrb0oxiCfyHb9wa2Qb0x6o9FpuBIc5ZXId+cEXEvOdqhnUQ7ZuOi/fX81hlqgUaiD/A6P+zjAcREXdktd+hrhSXwCIKSBkp/mNymnalQKJkLaNVT+W2sOWqXxTSTIytCQx36xABcj1BXRApntob6Qvche8QJLTjzr9bDpn+Mo59N9PSU51DPIj5Avre6ChTHEQvjz9s1IM2XroBX/KFBnPj33aYQZyov4uxrVXxic+fiY+fLMF8x1ut/eNWeQU6fn+rU5PEGQ9bbAsjVBZYA5H93ROhO5lnSxoEk5PHkgQ9WpxueckPjJIUGAs+O8QMRFicccfKjhNIc32rXTqbVqLyoz62riDn8Y18MUBoeI8ORyqZOKEEBFsi5dwqoq8t82NFdx5LFjsLdk4RmMXZ2uygNLk8gH2Yyfu3iOQS2bKtNCW42Xmo66Xu5kt8NwAneYQK0mTn6HUv94K10J4hY+Q=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>補充：經討論串有人提醒後發現這是一個叫做 SRP（Secure Remote Password）的協議，Proton 有提供一個 &lt;a class="link" href="https://proton.me/static/9f5e7256429a2f674c943c5825257b82/protonmail_authentication_excerpt.pdf" target="_blank" rel="noopener"
>ProtonMail Security Features and Infrastructure&lt;/a>，裡面有記錄他們的安全措施，就有講到這個機制。&lt;/p>
&lt;p>看起來滿複雜要花不少時間研究，先放著，有興趣的可以參考：&lt;a class="link" href="https://blog.amis.com/srp-1f28676aa525" target="_blank" rel="noopener"
>SRP — 更健全的登入及資料傳輸保護協議&lt;/a>&lt;/p>
&lt;p>雖然更安全，但成本應該又更高了。&lt;/p>
&lt;hr>
&lt;h2 id="交易所與銀行">交易所與銀行&lt;/h2>
&lt;p>看完上面案例發現有做的是少數，因此我好奇更注重安全的加密貨幣交易所與傳統銀行有沒有做。&lt;/p>
&lt;h3 id="binance">Binance&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://accounts.binance.com/bapi/accounts/v2/public/authcenter/login" target="_blank" rel="noopener"
>https://accounts.binance.com/bapi/accounts/v2/public/authcenter/login&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;email&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test@test.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;fe2e6b4138fcd7f27a32bc9af557d69a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;safePassword&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;d404559f602eab6fd602ac7680dacbfaadd13630335e951f097af3900e9de176b6db28512f2e000b9d04fba5133e8b1c6e8df59db3a8ab9d60be4b97cc9e81db&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="coinbase">Coinbase&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://login.coinbase.com/api/v1/authenticate-credentials" target="_blank" rel="noopener"
>https://login.coinbase.com/api/v1/authenticate-credentials&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;email&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test@test.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="kraken">kraken&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://www.kraken.com/api/internal/account/settings/tfa" target="_blank" rel="noopener"
>https://www.kraken.com/api/internal/account/settings/tfa&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="玉山銀行">玉山銀行&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://ebank.esunbank.com.tw/fco/fco08001/FCO08001_Home.faces" target="_blank" rel="noopener"
>https://ebank.esunbank.com.tw/fco/fco08001/FCO08001_Home.faces&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">loginform:custid&lt;span class="o">=&lt;/span>A0000...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">loginform:name&lt;span class="o">=&lt;/span>&lt;span class="nv">mxagZmaqygDx0XX6784Svw&lt;/span>&lt;span class="o">==&lt;/span>__NgZQcFfAx+lQmPza2eNpOA&lt;span class="o">==&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">loginform:pxsswd&lt;span class="o">=&lt;/span>8,lIRnuUxw/yStOt9QIYG2U3Gn2XkG03x4Ey/UU6JGtsbUxfRXoAv9CjE3EWerDN3tfx3dD/B3ChLAPMSG2BA3jMXUCZC06y8UbQ5isKc9fCWZSSZAWWcOmJ7LdXw1ZhjV55hpw1upvAr9WEmZ0XF6x7if+dBxJ4KZ00d83qA9eA+3VaSk+JLhN8/CFBfTKTfJEs3PDNsm12XzRUBb4YE1aPQosVX10mdvh3zY5lmkrKuq8gnuImEf3oLOk4EF3eVpr6jJiFzMKlHybvGdtKYS25+pgTS68wn3v023barbSmgivcv5atm0XsyXWDY2dKEtdQz+7A6R+AB0bExbQlRjqQ&lt;span class="o">==&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="國泰世華">國泰世華&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://www.cathaybk.com.tw/MyBank/Quicklinks/Home/NormalSignin" target="_blank" rel="noopener"
>https://www.cathaybk.com.tw/MyBank/Quicklinks/Home/NormalSignin&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CustID&lt;/span>&lt;span class="o">=&lt;/span>A000...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">UserId&lt;/span>&lt;span class="o">=&lt;/span>DC0C6E52BE2A2354C53401207F220F1B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Password&lt;/span>&lt;span class="o">=&lt;/span>8cf5e1977f149ed0362629007a7f91d0efc7b12cb1895ba701c528a12b38d12f8148ca03ee671fe25d2a3a807be980f7728566e359a675734ce046899b147658388bb60f9b900e2ccc9adac280b54b5f2e28cb7eee1b634d0e1ed1c0c0c598c350f61eb003405559331a7f047add7289466bf42cfd5b9e774a1fa116af4fd7050adb8f174d42a8e2098a014a788bd2ffae3bf4ff7a8d8d7e2e8068402fda395da41be6e5d32f2d32cbee2afc26e82c58b60357b5cb186a3b9cf69df2deb9da8c9fde45337935180cb4e177109413d7a758d38bfc8334a4509d8d8fb6a37080f0e0086b4a5ef68f7809ca2ef97183b7f66d996873bb7dbfcee61d2da424b8b968
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="中國信託">中國信託&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://www.ctbcbank.com/IB/api/adapters/IB_Adapter/resource/preLogin" target="_blank" rel="noopener"
>https://www.ctbcbank.com/IB/api/adapters/IB_Adapter/resource/preLogin&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;rqData&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;custId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A00....&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;pin&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;878dbee38bbb4d77a30ee128f55f7bfe2169e45380d62a75453d3ca175e8ce8b|43d0499147b62adeec4eef3c77d33171b4569d0bdf7bbbe2b8b9bde3d30a26aba69aadfb28dfbaa9a997a0ccf668aaab0b6da582275175272172569a58a60bbfc5ac3a8c6862ce31f86247d7c1adf307e363c0f251fb88c4d39afa6ed0ca0a49e053f4f90000fa77b4e78beaead72ebdf52a13ecb4f20ae9a532947fad8156d5ec69d6763243364e71659079e469d1e01d0c384b0c71f4e9e524890227d82a51a340ef0b48638e05e347d75cb93d4a825a2bce6a90ef47f512351ee2d0d1ea17fb8afd521e427578603ea775191711f81d8dcb18e46b72daf3a49a60e50d12d3887e3bafab3758730f7fb0276373ebe1da01a03162ec8e73a202091a51b7f88d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bfcdb9b2d6896a3bfb4a6542e8fb2689486d000b11bdc0c7bc336a6534aec74c|1b1a758bb26702bc0ac7cd660da2a72866f2cfdcf3668f2d39a5f8b006854f52a08f418b0a460b36374f95b7a310d73ea9994788698041f524ecd1f153448ab5d51f901a9a08ac2a9ee04c5c273ecb9d4ec1b6a62e9696c6126271e2f8c334fe17ce8b8538139363b90be75c1130cb251ec240bd26c920b52f5be9fc59094ce7d935d826242d69dc1ff7047a5abbf11d3c7de639a14bb10230912903cd948c05b3b3cb0cdb100f979640e291774e623a7109bde7b55bb8a6a373c0ca12820b072132ea61c845e60e26d09c7ee0fe23f7de286cbccb067a86fd1985c5b455f9ae46ce24dc8f52bcb05c205d6a462345162ae82c35e045bf3fd43a297c3edcfe17&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="美國銀行">美國銀行&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://m.globalcard.bankofamerica.com/pkmslogin.form" target="_blank" rel="noopener"
>https://m.globalcard.bankofamerica.com/pkmslogin.form&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">username&lt;/span>&lt;span class="o">=&lt;/span>fcc63767-1a43-4cc6-8c3e-1346350b5274
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">12345678&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="新加坡星展銀行">新加坡星展銀行&lt;/h3>
&lt;p>API 網址：&lt;a class="link" href="https://internet-banking.dbs.com.sg/IB/Welcome" target="_blank" rel="noopener"
>https://internet-banking.dbs.com.sg/IB/Welcome&lt;/a>&lt;/p>
&lt;p>請求內容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">USER_LOGON_NAME&lt;/span>&lt;span class="o">=&lt;/span>test123
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ENCRYPTED_PIN_BLOCK&lt;/span>&lt;span class="o">=&lt;/span>A8C48B7572A1A53C5A66E9B43365027C7FBF14BF461F480A46781E49648A8F70271A29C374F86FCD55A76ED17B2284B47C799B74475F29749D68631FF7E322177A21EEE8C41D8950638A2828C34A2653D7C9F69F5DA568E42D64CE89FCE8F024217B235835E6F8BC3C536F56361EDF459AFCE9A512BDBACAB2D25423209996C2E84A18EA8446685DAF9FAD4B1D6D8DF0F378EC27D9A81AD4D1A2B91BA3CFD838140A9BD48AD8D38D33B0093110BD1CA2C76F3DE4CBD969A9B0260DB890E9B1A99DC1193BFE9A1EDB3E56F71CB1CD8630558B242B040F733A4A40B2E17DE6DA03A58DEC8BB12DA87BB25971E2DBE5AF7AE6112266A3F9027B449BDF46D8DC0A1A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="結論">結論&lt;/h2>
&lt;p>在隨機想到的 20 個網站中，有 7 個有在前端做加密或是 hash（我懶得看是哪個了，總之有做事就對了），名單是：&lt;/p>
&lt;ol>
&lt;li>Facebook&lt;/li>
&lt;li>Proton&lt;/li>
&lt;li>Binance&lt;/li>
&lt;li>玉山銀行&lt;/li>
&lt;li>國泰世華&lt;/li>
&lt;li>中國信託&lt;/li>
&lt;li>新加坡星展銀行&lt;/li>
&lt;/ol>
&lt;p>雖然說 35% 看起來很高，但那是因為銀行佔了大多數，一般網站則是很少實作這個機制。&lt;/p>
&lt;p>寫到這邊，可以來下結論了。&lt;/p>
&lt;ul>
&lt;li>第一個結論是：&lt;/li>
&lt;/ul>
&lt;p>「在 client 端傳送密碼前先把密碼加密或是 hash，確實能夠增加安全性」&lt;/p>
&lt;p>理由是做了以後，能夠達成以下事項：&lt;/p>
&lt;ol>
&lt;li>HTTPS 因為各種原因失效時，攻擊者無法取得明文密碼&lt;/li>
&lt;li>在 Server 端，沒有任何人知道使用者的明文密碼&lt;/li>
&lt;li>明文密碼不會因為人為失誤被記錄到 log 中&lt;/li>
&lt;/ol>
&lt;p>以上都是沒有在 client 加密或是 hash 時做不到的。&lt;/p>
&lt;ul>
&lt;li>第二個結論是：&lt;/li>
&lt;/ul>
&lt;p>「確實有些大公司有做這個機制，但是非大多數，不過在銀行業似乎是主流」&lt;/p>
&lt;p>這個結論上面有貼完整的資料了，一般的網站很少做這個機制，但還是有人做。&lt;/p>
&lt;ul>
&lt;li>第三個結論是：&lt;/li>
&lt;/ul>
&lt;p>「雖然從技術上來看能夠增加安全性，但實際上是否實作，仍然要考慮其他因素」&lt;/p>
&lt;p>這因素就是我前面提過的「可能性」還有開頭我講先不談的「成本」。&lt;/p>
&lt;p>若是真的比較安全，為什麼一般網站不會實作這個機制？&lt;/p>
&lt;p>或許是因為覺得 HTTPS 被攻破的可能性太低，低到可以忽略不計（我相信這是大多數留言的人覺得不需要做的理由，我也同意這點），也或許是成本太高，會增加程式碼複雜度；若是採用加密的方案，也會消耗更多運算的資源在加解密上面，這也是成本。&lt;/p>
&lt;p>這就是我覺得應該講清楚的地方。&lt;/p>
&lt;p>在前端先做 hash 或是加密，它確實是有優點的，不是多此一舉，也不是沒有意義，更不是讓系統變得更危險。&lt;/p>
&lt;p>但這不代表每個系統都該實作這個機制，因為它帶來的效益或許沒有成本高，這個端看各個公司的考量。對大部分的公司來說，與其為了 HTTPS 失效這個極低的可能性去投入成本，不如把時間花在加強其他登入環節的安全性（例如說 2FA 啦，或是不同裝置登錄警告等等），帶來的效益會更高。&lt;/p>
&lt;p>有些服務還會選擇把整包 request 都加密，而非只有密碼，這個又更安全但是成本又更高，而且 debug 很不方便。雖然說既然加密做在 client 端，攻擊者一定有辦法逆向這個機制，看出是怎麼做的，但這不代表這些機制沒幫助。&lt;/p>
&lt;p>舉例來說，假設我有個搶票 App 不想讓別人知道 API 怎麼呼叫，於是就實作了一個超複雜的加解密機制，儘管高手還是可以做逆向工程，寫出一個搶票機器人，但這個機制增加了他的時間成本以及對技術的要求。&lt;/p>
&lt;p>以技術上來說，就算理論上一定會被破解，這些機制還是有意義的，它的意義在於增加破解難度，加殼、混淆都是一樣的，不會因為「在 client 端的東西一定會被看穿」而不去做這些機制。&lt;/p>
&lt;p>重點在於你想保護的商業邏輯的價值，有沒有高到你需要付出這些成本去做額外的安全機制。&lt;/p>
&lt;p>最後，如果你需要一個條列式的簡單結論，會是：&lt;/p>
&lt;ol>
&lt;li>無論如何，一定要先用 HTTPS&lt;/li>
&lt;li>在前端先把密碼做加密或是 hash 後再傳送，能夠增加安全性，但同時也帶來不少成本&lt;/li>
&lt;li>如果你是銀行或需要同等安全性，再來考慮要不要做這個，否則極大多數的狀況下，你不需要這個機制就夠安全了，資源投入在其他地方的效益會更大&lt;/li>
&lt;/ol>
&lt;p>若是對這個結論有不同意見，或是有在文章中發現哪些邏輯錯誤或技術錯誤，歡迎留言指正與討論，感恩。&lt;/p>
&lt;p>補充一下，這篇大多數從技術面來看，除此之外還可以從法遵面或是資安的實務經驗來看，但這些面向我就零經驗了。許願一下有相關經驗的人出來指點迷津，或許會有不同觀點。&lt;/p>
&lt;hr></description></item><item><title>面試常見的瀏覽器問題(三) - HTTP/1、HTTP/1.1 和 HTTP/2 的區別</title><link>https://wayneblog.ga/2022-12-19/browser-http1.0-http1.1-http2.0-difference/</link><pubDate>Mon, 19 Dec 2022 00:10:00 +0000</pubDate><guid>https://wayneblog.ga/2022-12-19/browser-http1.0-http1.1-http2.0-difference/</guid><description>&lt;img src="https://live.staticflickr.com/65535/52571909202_4ddc6d0335_o.jpg" alt="Featured image of post 面試常見的瀏覽器問題(三) - HTTP/1、HTTP/1.1 和 HTTP/2 的區別" />&lt;style>
.article-content p code {
background-color: #f5f5f5;
color: #ff3860;
}
.focus {
background: #f1e2e2;
color: #d62c2c;
padding: 0 5px;
}
&lt;/style>
&lt;p>&lt;a class="link" href="https://zh.wikipedia.org/zh-tw/HTTP/2" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;br>
&lt;a class="link" href="https://www.explainthis.io/zh-hant/interview-guides/browser/http1.0-http1.1-http2.0-difference" target="_blank" rel="noopener"
>參考網站&lt;/a>&lt;/p>
&lt;p>從 1989 年起，HTTP 經歷了數代的演化，從 1 到 1.1 再到 2 以及目前的 3，這些不同版本有些什麼不同呢？不管是前端或後端的面試，都是經常會考的。這篇我們會先針對 1 到 1.1 再到 2 之間的異同處做摘要。&lt;/p>
&lt;hr>
&lt;h2 id="出現時間">出現時間&lt;/h2>
&lt;p>&lt;strong>超文本傳輸協定 HTTP&lt;/strong> (&lt;strong>H&lt;/strong>yper&lt;strong>T&lt;/strong>ext &lt;strong>T&lt;/strong>ransfer &lt;strong>P&lt;/strong>rotocol) 是在網際網路中用來通信數據的基礎。HTTP 一開始的發展是從 1989 年所發起制定，其中經過幾個時期的演進，HTTP/1.1 是隨著在 1999 年 6 月公布的 &lt;a class="link" href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener"
>RFC 2616&lt;/a> 所發表 。HTTP/2 (最初命名為 HTTP 2.0) 則是在 2015 年 5 月以 &lt;a class="link" href="https://www.rfc-editor.org/rfc/rfc7540" target="_blank" rel="noopener"
>RFC 7540&lt;/a> 正式發表，並取代 HTTP/1.1 成為 HTTP 的實作標準。截至 2021 年 10 月，全球有 46.5%的網站支援了 HTTP/2 (&lt;a class="link" href="https://zh.wikipedia.org/zh-tw/HTTP/2" target="_blank" rel="noopener"
>wiki&lt;/a>)。&lt;/p>
&lt;hr>
&lt;h2 id="http1-和-http11-差異">HTTP/1 和 HTTP/1.1 差異&lt;/h2>
&lt;p>往下讀之前，要先理解之所以會有 HTTP/1.1 是因為 HTTP/1 有一些不那麼理想的地方。因此建議不要死背差異，而是從「 HTTP/1.1 解決了什麼問題」出發來理解。&lt;/p>
&lt;h3 id="持久連接-keep-alive">持久連接 (keep-alive)&lt;/h3>
&lt;p>HTTP/1 在發送每個請求之前都需要建立一個新的連接，而每次連接都是有成本的，這種每次重連的方式會造成很多頻寬的浪費，以及時間的延遲。而 HTTP/1.1 默認使用持久連接，讓 HTTP/1.1 可以使用同一個 TCP 連接來重複多個 HTTP 請求，這麼一來就可以避免每次重新建立連接造成的頻寬浪費、時間延遲。&lt;/p>
&lt;h3 id="狀態碼-100-continue">狀態碼 100 (Continue)&lt;/h3>
&lt;p>在某些情況下，伺服器端會拒絕客戶端發送的請求，因為發請求時可能會夾帶正文 (request body)，所以每次請求被拒絕都會造成頻寬上的額外浪費。在 HTTP/1 沒有機制避免這種類型的浪費，而 HTTP/1.1 的 &lt;code>100 (Continue)&lt;/code> 狀態碼則可以協助我們避免這種浪費。具體來說，HTTP/1.1 讓使用者端先送出一個只含有標頭、不帶內文的請求到伺服器，伺服器確認沒有問題之後，會回應狀態碼 &lt;code>100 (Continue)&lt;/code>；收到 &lt;code>100 (Continue)&lt;/code> 後，客戶端才會正式發一個帶有正文的請求；如果沒有收到，則代表伺服器端不接受該請求，這讓客戶端知道伺服器端不接受，這能讓客戶端可以避免發帶有正文的請求，進而減少傳輸上的頻寬浪費。(詳細請見 &lt;a class="link" href="https://www.rfc-editor.org/rfc/rfc2616#section-8.2.3" target="_blank" rel="noopener"
>RFC 的這個段落&lt;/a>)。&lt;/p>
&lt;h3 id="快取緩存">快取緩存&lt;/h3>
&lt;p>HTTP/1 主要使用標頭中的 &lt;code>If-Modified-Since&lt;/code>、&lt;code>Expires&lt;/code> 來做為緩存的判斷標準，這兩者都是以時間作為依據；HTTP/1.1 則引入更多的緩存策略，例如：&lt;code>Etag&lt;/code>、&lt;code>If-Unmodified-Since&lt;/code>、&lt;code>If-Match&lt;/code>、&lt;code>If-None-Match&lt;/code>，透過這些可以更優化緩存的實現 (這些標頭的使用在面試也很常考，詳見&lt;a class="link" href="https://www.explainthis.io/zh-hant/interview-guides/browser/http-caching" target="_blank" rel="noopener"
>這篇文章&lt;/a>)。&lt;/p>
&lt;h3 id="host-字段">Host 字段&lt;/h3>
&lt;p>HTTP/1.1 增加了 Host 字段，用來指定伺服器的域名。在 HTTP/1 中，會認為每台伺服器都綁定唯一的 IP 地址，因此請求當中的 URL 並沒有傳遞主機名(hostname)。但隨著之後虛擬主機技術的演進，現在在一台伺服器上可以存在多個虛擬主機，並且他們會共享同一個 IP 地址。所以有了 host 字段之後，就可以將請求發往同一台伺服器上的不同網站。&lt;/p>
&lt;h3 id="更多請求方法">更多請求方法&lt;/h3>
&lt;p>HTTP/1.1 相對於 HTTP/1 新增了許多請求方法，現今我們常用的 PUT, PATCH, DELETE, CONNECT, TRACE 和 OPTIONS 等都是在 HTTP/1.1 時新增的。&lt;/p>
&lt;hr>
&lt;h2 id="http2-和-http11-比較">HTTP/2 和 HTTP/1.1 比較&lt;/h2>
&lt;h3 id="多路復用request-multiplexing-來解決頭部阻塞-head-of-line-blocking">多路復用(Request multiplexing) 來解決頭部阻塞 (head-of-line blocking)&lt;/h3>
&lt;p>HTTP/1.1 使用了 pipelining 的機制，這可以讓客戶端在同一個 TCP 連接內並行發出多個 HTTP 請求，客戶端也不需要等待上一次請求結果返回，就可以發出下一次請求，但伺服器端必須依照接收到的客戶端請求的先後順序一次返回，以保證客戶端能夠區分出每次請求的回應內容，但這項機制在實作上較難實現，因此各家瀏覽器，都將此功能預設為關閉。(&lt;a class="link" href="https://stackoverflow.com/questions/30477476/why-is-pipelining-disabled-in-modern-browsers" target="_blank" rel="noopener"
>可以參考此篇 stackoverflow&lt;/a>)。此外 pipeline 也造成頭部阻塞(head-of-line blocking ( HOL ))問題，如果有任一個請求要操作很久或傳輸包流失，那就會阻塞整個 pipeline 的工作。&lt;/p>
&lt;p>HTTP/2 引進了多路復用的機制，讓同一個 TCP 連接中，同時發送和接受多個請求，並且不用等到前一個請求收到回應，透過這個機制，解決了過往在 HTTP 層級的的頭部阻塞問題 (備註：但 TCP 層級仍有頭部阻塞問題，這會在 HTTP/3 被解決)。&lt;/p>
&lt;h3 id="優先請求順序">優先請求順序&lt;/h3>
&lt;p>HTTP/2 版本中，每個請求或回應的所有數據包，稱之為一個數據流，並且，每個數據流擁有一個唯一編號 ID (&lt;code>stream ID&lt;/code>)。每個數據包在發送的時候就會戴上對應的數據流編號 ID，客戶端還能指定數據流的優先級，優先級越高服務器也會越快做出回應。&lt;/p>
&lt;h3 id="標頭header訊息壓縮">標頭(Header)訊息壓縮&lt;/h3>
&lt;p>在 HTTP/2 之前因為安全性問題，多數不會對標頭的訊息進行壓縮，主要是過去的採用的演算法可能遭受 CRIME 攻擊。在 HTTP/2 中，使用 HPACK 算法來避免攻擊，進而能壓縮標頭。因為壓縮標頭，讓傳輸時能大幅減少傳輸的訊息量，進而減少頻寬負擔，也增快傳輸速度。具體上 HPACK 使用一份索引表來定義常用的 http header，並把 http header 存放在表裡，請求的時候只需要發送在表裡的索引位置即可，不須用傳完整的標頭。&lt;/p>
&lt;h3 id="伺服器主動推送server-push">伺服器主動推送(Server push)&lt;/h3>
&lt;p>HTTP/2 允許伺服器端主動向客戶端推送數據，這能協助減少客戶端的請求次數。舉例來說，瀏覽器在過去要請求 &lt;code>index.html&lt;/code> 與 &lt;code>style.css&lt;/code> 來渲染完整的畫面；透過 Server Push，可以在瀏覽器請求 &lt;code>index.html&lt;/code> 時，也由伺服器主動發送 &lt;code>style.css&lt;/code> ，這樣只需要一輪 HTTP 的請求，就可以拿到所需的所有資源。&lt;/p>
&lt;hr></description></item><item><title>初學者都該了解的 HTTP 通訊協定基礎</title><link>https://wayneblog.ga/2022-07-24/beginner-http-lesson/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://wayneblog.ga/2022-07-24/beginner-http-lesson/</guid><description>&lt;img src="https://live.staticflickr.com/65535/52276290470_787c77a1b5_o.jpg" alt="Featured image of post 初學者都該了解的 HTTP 通訊協定基礎" />&lt;style>
.focus {
background: #f1e2e2;
color: #d62c2c;
padding: 0 5px;
}
&lt;/style>
&lt;p>&lt;a class="link" href="https://youtu.be/Taq5TV1K4XU" target="_blank" rel="noopener"
>參考網站 - 初學者都該學會的 HTTP 通訊協定基礎&lt;/a>&lt;br>
&lt;a class="link" href="https://totoroliu.medium.com/http-2-%E6%98%AF%E4%BB%80%E9%BA%BC-d7de699bdbae" target="_blank" rel="noopener"
>參考網站 - Http/2 是什麼?&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="目前-http-通訊協定的版本">目前 HTTP 通訊協定的版本&lt;/h2>
&lt;ul>
&lt;li>HTTP/0.9
&lt;ul>
&lt;li>於 &lt;strong>1991&lt;/strong> 年發表(已廢止)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP/1.0
&lt;ul>
&lt;li>於 &lt;strong>1996&lt;/strong> 年 &lt;strong>5&lt;/strong> 月發表(&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc1945" target="_blank" rel="noopener"
>RFC 1945&lt;/a>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP/1.1
&lt;ul>
&lt;li>於 &lt;strong>1997&lt;/strong> 年 &lt;strong>1&lt;/strong> 月發表(&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc2068" target="_blank" rel="noopener"
>RFC 2068&lt;/a>)&lt;/li>
&lt;li>於 &lt;strong>1999&lt;/strong> 年 &lt;strong>6&lt;/strong> 月發布 HTTP/1.1 更新版(&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc2616" target="_blank" rel="noopener"
>RFC 2616&lt;/a>)&lt;/li>
&lt;li>於 &lt;strong>2014&lt;/strong> 年 &lt;strong>6&lt;/strong> 月再次更新 HTTP/1.1 並將規格文件拆成六份&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP/2(&lt;a class="link" href="https://zh.wikipedia.org/zh-tw/HTTP/2" target="_blank" rel="noopener"
>Wikipedia&lt;/a>)
&lt;ul>
&lt;li>於 &lt;strong>2015&lt;/strong> 年 &lt;strong>5&lt;/strong> 月發布(&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7540" target="_blank" rel="noopener"
>RFC 7540&lt;/a>)(&lt;a class="link" href="https://caniuse.com/?search=http2" target="_blank" rel="noopener"
>瀏覽器相容性&lt;/a>)&lt;/li>
&lt;li>僅針對 HTTP/1.1 的 Message Syntax 部分作出強化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="http09-已廢止">HTTP/0.9 (已廢止)&lt;/h2>
&lt;h3 id="概要">概要&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>於 &lt;strong>1990&lt;/strong> 年由 Tim Berners-Lee 提出最初的 &lt;strong>HTTP&lt;/strong> 建議(&lt;strong>WWW&lt;/strong>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>實作重點&lt;/p>
&lt;ul>
&lt;li>用戶端要求是以 &lt;strong>ASCII&lt;/strong> 字元為主(單行命令即可發出請求 GET/)&lt;/li>
&lt;li>用戶端要求會以一個 &lt;strong>換行字元&lt;/strong> (CRLF) 來結束&lt;/li>
&lt;li>伺服器回應是以 &lt;strong>ASCII&lt;/strong> 字元為主，回應內容是 &lt;strong>HTML&lt;/strong> 文件&lt;/li>
&lt;li>每次執行完 Request / Response 就會自動關閉連線&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>主要特色&lt;/p>
&lt;ul>
&lt;li>Client / Server 架構、Request / Response 協定&lt;/li>
&lt;li>跑在 &lt;strong>TCP/IP&lt;/strong> 上的 &lt;strong>ASCII&lt;/strong> 協定 (要求/回應)&lt;/li>
&lt;li>被設計用來傳輸 &lt;strong>HTML&lt;/strong> 文件&lt;/li>
&lt;li>每完成一次 &lt;strong>ASCII&lt;/strong> 協定就會自動關閉連線&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="使用-bash-測試">使用 bash 測試&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 建立連線到 google&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ telnet google.com &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Connected to google.com.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Escape character is &lt;span class="s1">&amp;#39;^]&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 發送 GET 請求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ GET /about
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="http10">HTTP/1.0&lt;/h2>
&lt;h3 id="概要-1">概要&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>在 &lt;strong>1991&lt;/strong> 到 &lt;strong>1995&lt;/strong> 年之間，所謂 &lt;strong>瀏覽器&lt;/strong> 騰空出世！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>於 &lt;strong>1996&lt;/strong> 年 &lt;strong>5&lt;/strong> 月發表 &lt;strong>HTTP/1.0&lt;/strong> 版 (&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc1945" target="_blank" rel="noopener"
>RFC 1945&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>與 &lt;strong>HTTP/0.9&lt;/strong> 不同的部分&lt;/p>
&lt;ul>
&lt;li>用戶端要求是以 &lt;strong>ASCII&lt;/strong> 字元為主，但可發送多行命令(含要求標頭)
&lt;ul>
&lt;li>先送出&lt;strong>要求方法&lt;/strong>，再送出&lt;strong>要求標頭&lt;/strong>，最後以一個&lt;mark>額外的換行字元&lt;/mark>結束&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>伺服器回應是以 &lt;strong>ASCII&lt;/strong> 字元為主，回應內容會區分為
&lt;ul>
&lt;li>狀態列&lt;/li>
&lt;li>回應標頭&lt;/li>
&lt;li>回應內文主體(不僅僅是 &lt;strong>HTML&lt;/strong> 文件，可以是更多內容類型)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每完成一次 Request / Response 交握就會&lt;strong>自動關閉 TCP/IP 連線&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="使用-bash-測試-1">使用 bash 測試&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 建立連線到 google&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ telnet google.com &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Trying 172.217.24.14...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Connected to google.com.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Escape character is &lt;span class="s1">&amp;#39;^]&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 發送 GET 請求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ GET /about HTTP/1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.google.com &lt;span class="c1"># 因一個 domain 可以 hosting 多個網站，因此通常都會於 request header 再標記 Host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; HTTP/1.0 &lt;span class="m">301&lt;/span> Moved Permanently
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 取得後，會自動中斷 TCP 連線&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 若需再發送請求，需重新建立 TCP 連線&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ telnet google.com &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="http11">HTTP/1.1&lt;/h2>
&lt;h3 id="概要-2">概要&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>於 &lt;strong>1997&lt;/strong> 年 &lt;strong>1&lt;/strong> 月發表 &lt;strong>HTTP/1.1&lt;/strong> 版 (&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc1945" target="_blank" rel="noopener"
>RFC 1945&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>於 &lt;strong>1999&lt;/strong> 年 &lt;strong>6&lt;/strong> 月發布 &lt;strong>HTTP/1.1&lt;/strong> 更新版 (&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc2616" target="_blank" rel="noopener"
>RFC 2616&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>與 &lt;strong>HTTP/1.0&lt;/strong> 不同的部分&lt;/p>
&lt;ul>
&lt;li>傳輸協議的效能改進(新增不少 HTTP 標頭定義)
&lt;ul>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_persistent_connection" target="_blank" rel="noopener"
>持續連線狀態&lt;/a>(persistent connection)&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_chunked_encoding_transfer" target="_blank" rel="noopener"
>切塊編碼傳輸&lt;/a>(chunked encoding transfer)&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_byte_range_request" target="_blank" rel="noopener"
>位元範圍請求&lt;/a>(byte range request)&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_cache_control" target="_blank" rel="noopener"
>額外快取機制&lt;/a>(cache control)&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/HTTP_request_pipelining" target="_blank" rel="noopener"
>請求管線作業&lt;/a>(request pipelining)(需搭配&lt;strong>持續連線狀態特性&lt;/strong>才能用)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="使用-bash-測試-2">使用 bash 測試&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 建立連線到 google&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ telnet google.com &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Trying 172.217.24.14...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Connected to google.com.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; Escape character is &lt;span class="s1">&amp;#39;^]&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 發送 GET 請求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ GET /about HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.google.com &lt;span class="c1"># 因一個 domain 可以 hosting 多個網站，因此通常都會於 request header 再標記 Host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; HTTP/1.0 &lt;span class="m">301&lt;/span> Moved Permanently
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 取得後，不會自動中斷 TCP 連線，可再發送請求&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ GET /abc HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.google.com &lt;span class="c1"># 因一個 domain 可以 hosting 多個網站，因此通常都會於 request header 再標記 Host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; HTTP/1.1 &lt;span class="m">404&lt;/span> Page Not Found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="目前-http11-的六大規格">目前 HTTP/1.1 的六大規格&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7230" target="_blank" rel="noopener"
>RFC 7230&lt;/a> HTTP/1.1：Message Syntax and Routing&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>RFC 7231&lt;/a> HTTP/1.1：Semantics and Content(最重要)&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7232" target="_blank" rel="noopener"
>RFC 7232&lt;/a> HTTP/1.1：Conditional Requests&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7233" target="_blank" rel="noopener"
>RFC 7233&lt;/a> HTTP/1.1：Range Requests&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7234" target="_blank" rel="noopener"
>RFC 7234&lt;/a> HTTP/1.1：Caching&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7235" target="_blank" rel="noopener"
>RFC 7235&lt;/a> HTTP/1.1：Authentication&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="關於-http-通訊協定的基本常識">關於 HTTP 通訊協定的基本常識&lt;/h2>
&lt;ul>
&lt;li>無狀態特性(stateless)：相同的 request，都會得到相同的 response，不會因為狀態不同而改變&lt;/li>
&lt;li>分散式架構(distributed)：相同的 request，不同載體發送，都會得到相同的 response&lt;/li>
&lt;li>協作的架構(collaborative)：不一定只有 client / server，也可以是 client / proxy / reverse proxy / server&lt;/li>
&lt;li>超文本(hypertext = not just &amp;ldquo;text) but with &amp;ldquo;links&amp;rdquo;)：除了內容，還包含連結&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="初學者應了解-http-的基本運作方式">初學者應了解 HTTP 的基本運作方式&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>如何發出 HTTP 要求(HTTP Request)&lt;/p>
&lt;ul>
&lt;li>要求方法(Request Methods)
&lt;ul>
&lt;li>GET、POST、PUT、DELETE、PATCH、&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>要求標頭(Request Headers)
&lt;ul>
&lt;li>Connection、COntent-Type、&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>斷行符號(CRLF)&lt;/li>
&lt;li>要求內容主體(Request Body)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如何回應 HTTP 訊息(HTTP Response)&lt;/p>
&lt;ul>
&lt;li>回應狀態碼(Response Status Codes)
&lt;ul>
&lt;li>HTTP/1.1 &lt;code>200&lt;/code> OK&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>回應標頭(Response Headers)&lt;/li>
&lt;li>斷行符號(CRLF)&lt;/li>
&lt;li>回應內容主題(Response Body)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="http2">HTTP/2&lt;/h2>
&lt;h3 id="http2-各個瀏覽器的支援度">HTTP/2 各個瀏覽器的支援度&lt;/h3>
&lt;p>&lt;a class="link" href="https://caniuse.com/?search=HTTP%2F2" target="_blank" rel="noopener"
>點我查看瀏覽器支援度&lt;/a>&lt;/p>
&lt;p>Edge / Firefox / Chrome / Opera 皆在 2015 年起就支援 HTTP/2，基本上不需要太擔心主流瀏覽器的支援性問題。&lt;/p>
&lt;blockquote>
&lt;p>PS：&lt;a class="link" href="https://hieven.medium.com/http-2-%E5%BE%9E%E9%9B%B6%E5%88%B0%E4%B8%80-be221087cd35" target="_blank" rel="noopener"
>如何在 Node.js 中使用 HTTP/2&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="http2-改善了什麼">HTTP/2 改善了什麼？&lt;/h3>
&lt;p>http/2標準發布於2015年5月，其主要目的是透過一些措施改善瀏覽器瀏覽網頁 &lt;strong>加載的速度(page load)&lt;/strong> 。目前大多數的瀏覽器已支援 http/2 (chrome, firefox, safari等)標準，又 http/2與 http/1.1有著高度的相容信，舉凡request method(post, get..etc), http status code, url, header 等等，因此對於web developer來說，只需要確保你的網站有支援https(因為瀏覽器只支援https 在http/2上)。那麼http/1.1與http/2到底相差多快呢，&lt;a class="link" href="http://www.http2demo.io/" target="_blank" rel="noopener"
>點我體驗&lt;/a>!&lt;/p>
&lt;h3 id="http2-是如何改善">HTTP/2 是如何改善？&lt;/h3>
&lt;h4 id="只需要單一網路連線-single-tcp-connection">只需要單一網路連線 (Single TCP connection)&lt;/h4>
&lt;p>只需要單一網路連線，就可以連接網站伺服器，下載所有需要的資源。大大節省 HTTP/1.1 需要一直建立多個網路連線時的啟動時間浪費。&lt;/p>
&lt;h4 id="request-and-response-multiplexing-多路複用">Request and response multiplexing (多路複用)&lt;/h4>
&lt;p>在 http/1.1 中，client 端時常會同時發起多個 request 至 server 拿取檔案(像是js, css, image等)，以此方式達到快速載入頁面。如下圖在 http/1.1 中會同時與 server 建立3個 TCP connection，但是瀏覽器通常會限制 TCP connection 同時建立的數目。因此在 http/2 協定中，允許 client 端與同一 server 建立單一 TCP connection 並以非同步方式傳輸要的檔案。&lt;/p>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52275827083_0a977870db_o.png"
max-width="100%"
max-height="100%"
class="gallery-image"
loading="lazy"
>&lt;/p>
&lt;h4 id="優先權設計-prioritizationhttpsnghttp2orgblog20140427how-dependency-based-prioritization-works">優先權設計 (&lt;a class="link" href="https://nghttp2.org/blog/2014/04/27/how-dependency-based-prioritization-works/" target="_blank" rel="noopener"
>Prioritization&lt;/a>)&lt;/h4>
&lt;p>伺服器可以決定例如 CSS 或 JavaScript 檔案，哪些要優先傳送。&lt;/p>
&lt;h4 id="header-compression-標頭壓縮">Header compression (標頭壓縮)&lt;/h4>
&lt;p>每一個 http 的傳輸中都會攜帶一組 header，在 http/1.1 中，header 會是以明文(plain text)傳輸大小通常會是500-800 bytes，若有攜帶 cookie 也有可能會更大。因此在 http/2 中，會將 request 以及 response 的 header 使用 &lt;a class="link" href="https://http2.github.io/http2-spec/compression.html" target="_blank" rel="noopener"
>HPACK&lt;/a> 演算法壓縮 header 的內容，此方法壓縮後可以減少 85%-88% 的大小。&lt;/p>
&lt;h4 id="server-push-伺服器推送">Server push (伺服器推送)&lt;/h4>
&lt;p>在 http/1.1 中，通常 client 端 request 甚麼 server 就會回傳甚麼，例如: 當 client request html 那麼 server 將只會回傳 html。但在 http/2 中，允許 server 主動推送有相關的資料給 client，例如: 當 client 只 request html，但是 server 知道 client request 此 html 後續也會 request css, js 等，因此 server 就會在 client 沒有 request 的情況下主動推送 css, js 檔給 client。那 server 怎麼知道這些檔案是有相關性的呢? web developer 將需要 server push 的檔案加上特定的描述即可。(&lt;a class="link" href="https://www.smashingmagazine.com/2017/04/guide-http2-server-push/" target="_blank" rel="noopener"
>描述&lt;/a>)&lt;/p>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52274831682_c7dd69e454_o.png"
max-width="100%"
max-height="100%"
class="gallery-image"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>不過，這個功能比較有爭議，一來他需要 Web 開發者額外描述有哪些檔案需要隨著 HTML 一起推送給瀏覽器，不是 Web 伺服器升級 HTTP/2 就自動會有。二來它不管瀏覽器是不是已經有快取這個資源，都會推送而造成頻寬浪費。因此實務上筆者認為可以改用瀏覽器的 &lt;a class="link" href="https://css-tricks.com/prefetching-preloading-prebrowsing/" target="_blank" rel="noopener"
>Prefetch&lt;/a> 功能，讓客戶端的瀏覽器自己處理即可。&lt;/p>
&lt;/blockquote>
&lt;h4 id="binary-framing-layer-二進制影格層">Binary framing layer (二進制影格層)&lt;/h4>
&lt;p>在 http/2 中，header 與 body 所挾帶的 property 與 http/1.1 相同(ex. verbs, methods)，然而兩者在傳輸上會有不同。在 http/2 中，會將 header 以及 body 編碼成二進制在 server 與 client 端中傳輸，在 http/1.1 中，則是以明文的方式傳輸。將訊息編碼成二進制進行傳輸，此特性是 http/2 的其他特性的根本基礎。&lt;/p>
&lt;blockquote>
&lt;p>冷知識：在 HTTP/1.1 定義了&lt;a class="link" href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4" target="_blank" rel="noopener"
>四種解析訊息的方式&lt;/a>，在 HTTP/2 只需要一種。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://live.staticflickr.com/65535/52274831672_3c70d84aab_o.png"
max-width="100%"
max-height="100%"
class="gallery-image"
loading="lazy"
>&lt;/p>
&lt;h3 id="總結">總結&lt;/h3>
&lt;p>根據 &lt;a class="link" href="https://w3techs.com/technologies/details/ce-http2" target="_blank" rel="noopener"
>w3Techs&lt;/a> 網站，目前使用http/2的網站有45.7%，未來確實會變成主流，身為軟體工程師，還是多少理解來的好。此篇文章僅記錄筆者蒐集資料彙整結果，若有任何錯誤資訊還請直接點出，萬分感謝。&lt;/p>
&lt;hr></description></item></channel></rss>